%%% Фајл:     b01_Introduction.mkiv
%%% Аутор:    Joaquín Ataz-López
%%% Започето: Март 2020
%%% Завршено: Март 2020
%%% Садржај:  Прво поглавље увода у ConTeXt: општи преглед система.
%%%	      Садржај је делимично из презентације система LaTeX од
%%%	      Копке и Далија у поглављу 1 њихове књиге Водич за LaTeX
%%%   
%%% Уређивано са: Emacs + AuTeX - и повремено са vim + context-plugin
%%%

% \environment ../introCTX_env.mkiv

\startcomponent b01_Introduction.mkiv

\startchapter 
  [
    title=\ConTeXt: општи преглед,
    bookmark=ConTeXt: општи преглед,
    reference=cap:panorama
  ]

\TocChap

\startsection 
  [title=Па шта је уопште \ConTeXt?,
  bookmark=Па шта је уопште ConTeXt?]

\ConTeXt\ је {\em словослагачки систем}, или другим речима: опсежан скуп
алата креиран тако да кориснику пружи апсолутну и потпуну контролу над
изгледом и презентацијом специфичних електронских докумената намењених
за штампање на папиру или за приказ на екрану. Ово поглавље објашњава
шта то све значи. Али најпре, хајде да истакнемо неке од карактеристика
система \ConTeXt.

\startitemize

  \item Постоје две {\em врсте} система \ConTeXt\ познате као Mark~II и
  Mark~IV. \ConTeXt\ Mark~II је замрзнут, тј. сматра се да је потпуно
  развијен језик који се убудуће неће мењати, нити ће добијати нове
  могућности. Нова верзија би се појавила само у случају да постоји грешка
  која мора да се исправи. С друге стране, \ConTeXt\ Mark~IV наставља да
  се развија и с времена на време се појављују нове верзије које доносе
  нека побољшања или додатне могућности. Али, мада се још увек развија, он
  је прилично зрео језик у који нове верзије уносе прилично суптилне
  измене које скоро искључиво утичу на функционисање система на ниском
  нивоу. За обичног корисника су ове измене потпуно транспарентне; као да
  се уопште нису ни унеле. Мада обе {\em врсте} имају доста тога
  заједничког, оне имају и неке некомпатибилне могућности.  Из тог разлога
  се овај увод фокусира само на \ConTeXt\ Mark~IV.

  \item \ConTeXt\ је софтвер {\em libre} (или слободан софтвер, али не у
  смислу да је {\em бесплатан}). Тачније, програм (односно комплекс
  компјутерских алата који чине \ConTeXt), се дистрибуира под {\em ГНУ
  Општом Јавном Лиценцом}. Документација се доставља под \quotation{{\em
  Creative Commons}} лиценцом која дозвољава да се слободно копира и
  дистрибуира.

  \item \ConTeXt\ није ни текст процесор ни програм за уређивање текста,
  већ колекција алата намењених {\em трансформисању} текста који је
  написан омиљеним текст едитором. Стога, када радимо са системом
  \ConTeXt:

  \startitemize

    \item Почињемо тако што пишемо један или више текст фајлова било
    којим текст едитором.

    \item Ови фајлови, заједно са текстом који чини садржај документа,
    садрже и низ инструкција које систему \ConTeXt\ описују жељени
    изглед финалног документа генерисаног из оригиналних текст фајлова.
    Уствари, комплетан скуп \ConTeXt\ инструкција је {\em језик}; и
    пошто овај језик омогућава {\em програмирање} типографске
    трансформације текста, можемо рећи да је \ConTeXt\ {\em типографски
    програмски језик}.

    \item Када напишемо изворне фајлове, програм (који се такође зове
    \MyKey{context}\footnote{\ConTeXt\ је у исто време и језик и програм
    (а и још неке друге ствари). У тексту као што је овај, та чињеница
    прави проблем, јер понекад морамо направити разлику између ова два
    аспекта. Због тога сам усвојио типографску конвенцију да када говорим о
    језику \quotation{ConTeXt}, или и о језику и о програму, његово име
    пишем користећи логотип (\ConTeXt). Међутим, када желим да говорим само
    о програму, онда име пишем \MyKey{context} користећи сва мала слова и
    фонт фиксне ширине, типичан за компјутерске терминале и писаће машине.
    Овај фонт ћу такође да користим и за примере и помињања команди које су
    део овог језика.}) ће од њих да генерише PDF фајл који је спреман за
    слање у штампарију или приказ на екран.

  \stopitemize

  \item Дакле, у систему \ConTeXt\ морамо да направимо разлику између
  документа који пишемо и документа који генерише \ConTeXt. Да би се
спречиле било какве недоумице, документ који садржи инструкције за
форматирање ћу у овом уводу да зовем {\em изворни фајл}, а PDF документ
који из изворног фајла генерише \ConTeXt\ ћу да зовем {\em финални
документ}.

\stopitemize

О овим основним стварима ћемо још расправљати мало касније.

\stopsection

\startsection [title=Словослагање текстова]

Писање документа (књиге, чланка, поглавља, проспекта, рада…) и
типографско састављање свега су две потпуно различите активности.
Писање документа је скоро исто као и писање оловком; то ради аутор који
одлучује о његовом садржају и структури. Документ који прави директно
аутор, онако као да га је он или она написао, назива се {\em рукопис}.
Природно је да само аутор, или они који имају право да га читају, могу
да приступе рукопису. Дељење рукописа ван ове мале групе захтева да се
рукопис {\em објави}. Данас је то – у етимолошком смислу омогућавања
\quotation{јавног приступа} – просто као постављање на интернет, тако да
је рукопис доступан сваком ко га пронађе и жели да га прочита. Али све
до релативно скоро, објављивање је било прилично скуп процес који зависи
од одређених професионалаца специјализованих за то, вољних да приступе
рукопису који сматрају довољно значајним, било због његовог садржаја,
било због његових аутора.  Па чак и данас тежимо да реч {\em
публикација} резервишемо за ову врсту {\em професионалних издања} код
којих рукопис пролази кроз низ трансформација свог изгледа, чији циљ је
да се унапреди {\em читљивост} документа. Овај низ трансформација је оно
што називамо {\em словослагањем}.

Циљ словослагања је – у општем случају, остављајући по страни текстове
маркетиншког типа који покушавају да привуку пажњу читаоца – да
произведе документе највеће {\em читљивости}, што подразумева квалитет
штампаног текста који позива на читање или га омогућава, и осигурава да
је читаоцу удобно да чита. Овоме доприноси много ствари; неке се,
наравно, тичу {\em садржаја} документа: (квалитет, јасноћа,
организација…), али остале зависе од ствари као што су врста и величина
употребљеног фонта, употреба празног простора у документу, визуелно
раздвајање пасуса, итд. Уз то, постоје и друге врсте ресурса које нису
толико графичког или визуелног типа, као што су присуство одређених
помоћних средстава читаоцу~– заглавља и подножја страница, индекси,
речници, употреба црног слога, наслова у маргини, итд. Знање и исправна
употреба свих ресурса који су доступни словослагачу би могло да се
назове \quotation{уметност словослагања} или \quotation{уметност
штампања}.

У прошлости, све до појаве компјутера, задаци и улоге писца и
словослагача су били прилично раздвојени. Аутор је писао руком, или у
XIX веку писаћом машином која је имала ограничене типографске ресурсе,
чак и више ограничене него што су могућности оних који су ручно писали;
тада је писац прослеђивао оригинале издавачу или штампару, који их је
трансформисао тако да се добије штампани документ.

Данас је компјутерска наука аутору олакшала одлучивање о композицији све
до најситнијих детаља.  Међутим, то не умањује важност чињенице да
квалитети потребни за доброг аутора нису исти као они који су потребни
за доброг словослагача.  Зависно од врсте документа, аутору је потребно
разумевање материје о којој пише, јасноћа излагања, добро организовано
размишљање које води до добро организованог текста, креативност, осећај
за ритам, итд.  Али словослагач мора да комбинује добро знање
концептуалних и графичких ресурса који су му на располагању и довољно
добар укус како би могао складно да их употреби.

Добрим програмом за обраду текста\footnote{Према прилично старој
конвенцији, правимо разлику између {\em текст едитора} и {\em текст
процесора}. Рани програми за уређивање текста су обрађивали
неформатиране текст фајлове, док су друге врсте програма радиле са
бинарним фајловима форматираног текста.} је могуће постићи типографски
разумно добро припремљен документ.  Али текст процесори, у општем
случају, нису дизајнирани за словослагање, па резултати, мада могу бити
коректни, не могу да се пореде са резултатима који се добију помоћу
других алата дизајнираних за контролу композиције документа.  Уствари,
текст процесори су еволуирали из писаћих машина, па њихова употреба,
услед тога што маскирају разлику између ауторства текста и словослагања
текста, води ка типографски неадекватним текстовима којима недостаје
структура.  С друге стране, алати као што је \ConTeXt\ су еволуирали из
штампарске пресе; они нуде много више композиционих могућности, а изнад
свега, начин њихове употребе не може да се научи без успутног овладавања
многим појмовима у вези са словослагањем. То је и разлика у односу на
текст процесоре које неко може годинама да користи без потребе да научи
било шта о типографији.

\stopsection

\startsection [title=Језици за означавање]

Као што сам већ поменуо, у данима пре компјутера, аутор је рукопис
припремао ручно или писаћом машином и предавао га је издавачу или
штампару који је био одговоран да га трансформише у финални штампани
текст.  Мада је аутор сасвим мало био умешан у трансформацију, он или
она је утицао на указивање да су, на пример, одређене линије рукописа
наслови његових разних делова (поглавља, одељака…), или да одређене
ствари треба типографски истаћи на неки начин.  Ове ознаке је аутор
стављао на сам рукопис, понекад директно, а понекад користећи одређене
конвенције које су се временом развијале.  На пример, поглавља су увек
почињала на новој страници уметањем неколико празних линија испред
наслова, подвлачећи наслов, исписујући га верзалом, или постављујући
текст који треба да се истакне измећу две подвлаке, повећавајући
увлачење пасуса, итд.

Укратко, аутор је {\em означавао} текст како би навео начин на који
треба да се сложи. Касније би уредник руком исписао у текст остале
ознаке намењене штампару, као што су на пример, фонт који треба да се
користи и његова величина.

Данас, у компјутеризованом свету, ово настављамо да радимо кад
генеришемо електронске документе користећи нешто што се назива {\em
језик за означавање}.  Ове врсте језика користе низ {\em ознака} или
индикација које програм за обраду фајлова који их садрже зна како да
интерпретира.  Тренутно је HTML вероватно најпознатији језик за
означавање, јер је већина веб страница базирана на њему. HTML страница
садржи текст веб странице заједно са низом ознака које програму за
преглед који је учитава говоре како би требало да је прикаже.  HTML
означавање које разумеју веб прегледачи, заједно са инструкцијама о томе
где да их користе, се назива \quotation{HTML језик}, и то је {\em језик
за означавање}. Али уз HTML постоји много других језика за означавање;
они уствари цветају као печурке после кише, тако да се XML, језик за
означавање {\em par excellence}, налази свуда и користи се практично за
све: за дизајн база података, за креирање специфичних језика, пренос
структурираних података, фајлове конфигурације апликација, итд.  Такође
постоје језици за означавање намењени графичком дизајну (SVG, TikZ или
MetaPost), математичким формулама (MathML), музици (Lilypond и
MusicXML), финансијама, геоматици, итд. А такође постоје и језици за
означавање који су намењени типографској трансформацији текста, међу
којима се истичу \TeX\ и језици изведени из њега.

Када се говори о {\em типографском} означавању које указује на то како
би текст требало да изгледа, разликујемо две врсте означавања: {\em
чисто типографско означавање} и {\em концептуално означавање} или, ако
вам тако више одговара, {\em логичко означавање}.  Чисто типографско
означавање је ограничено на прецизно указивање типографског ресурса који
би требало да се употреби за приказ одређеног текста; као када, на
пример, наведемо да би неки текст требало да се испише црним слогом или
курзивом. С друге стране, концептуално означавање наводи функцију коју
одређени текст има у документу као целини, као када наведемо да је нешто
наслов, поднаслов или цитат.  У општем случају, документи у којима се
користи ова друга врста означавања су конзистентнији и једноставнији за
састављање, јер указују на разлику између ауторства и композиције: аутор
наводи да је та и и та линија наслов, или тај и тај фрагмент упозорење,
или цитат; па словослагач одлучује како да типографски истакне све
наслове, упозорења или цитате; дакле, с једне стране је гарантована
конзистенција, пошто ће сви фрагменти који имају одређену функцију
изгледати исто, а са друге стране, тако се штеди време јер је потребно
да се формат сваке врсте фрагмента наведе само једном.

\stopsection

\startsection
	[title=\TeX\ и језици изведени из њега,
	bookmark=TeX и језици изведени из њега]

\TeX\ је крајем 70их година развио {\sc Доналд Е. Кнут}, професор (сада
емеритус професор) теоретског компјутерског програмирања на Универзитету
Стенфорд. Он је имплементирао програм да би произвео сопствене
публикације и као пример систематски развијеног и коментарисаног
програма.  Уз \TeX, {\sc Кнут} је развио још један програмски језик под
именом \MetaFontLogo, креиран за дизајнирање типографских фонтова и
користио га је да дизајнира фонт који је крстио {\em Computer Modern},
који, уз уобичајене карактере сваког фонта, такође укључује и комплетан
скуп \quotation{словних ликова}\footnote{У типографији, словни лик је
графичка интерпретација карактера, већег броја карактера, или дела неког
карактера, и то је савремени еквивалент реза (ствари у коју је урезано
слово или покретно слово).} дизајнираних за писање математике. Свему
овоме је додао неколико додатних алата и тако је рођен словослагачки
систем под именом \TeX , који се, захваљујући својој снази, квалитету
резултата, флексибилности употребе и широким могућностима, сматра за
један од најбољих компјутеризованих система за композицију текста.
Дизајниран је за текстове у којима има доста математике, али је ускоро
било јасно да га системске могућности чине погодним за све врсте
текстова.

\reference[ref:boxes]{}Интерно, \TeX\ функционише на исти начин као што
су радили стари слагачи у штампаријама. За \TeX, све представља {\em
кутију}: слова се налазе у кутијама, празни простори су такође кутије,
неколико слова (кутије које садрже неколико слова) чине нову кутију која
садржи реч, а неколико речи, заједно са празним размаком између њих,
чини кутију која садржи целу линију, неколико линија постају кутија која
садржи пасус… и тако даље.  А све ово уз невероватну прецизност при
обради растојања. Имајте на уму да је најмања јединица коју \TeX\ може
да обради 65.536 пута мања од типографске тачке којом се мере карактери
и линије, што је обично и најмања јединица коју могу да обраде већина
текст процесор програма.  Ово значи да је најмања јединица са којом
\TeX\ може да ради приближно 0,000005356 милиметра.

% Копирао сам и налепио акцентовани епсилон из „Aprender ConTeXt”, од
% Пабла Родригеса, међутим из неког разлога није могло да се процесира. 
% Зато сам искористио \definecharacter да креирам акцентовани епсилон

\definecharacter etilde {\buildtextaccent ´ {\lower.2ex\hbox{\epsilon}}}

Име \TeX\ је изведено из корена грчке речи {\ss τέχνη,} исписане верзалом
{(\ss \tfx ΤÉΧΝΗ}). Стога, последње слово речи \TeX\ није латинично
\quote{X}, већ грчко \quote{χ}, које се изговара као \quotation{х}.
Дакле, \TeX\ би требало да се изговара као {\em тех}. С друге стране,
ова грчка реч је значила и \quotation{уметност} и
\quotation{технологија}, па је то разлог што је {\sc Кнут} баш њу
изабрао као име свог система. Сврха овог имена – написао је –
\quotation{је да вас подсети како се \TeX\ првенствено тиче техничких
рукописа високог квалитета. Његов акценат је на уметности и технологији,
као што је то и грчка реч по којој је добио име}.

Користећи конвенцију коју је установио {\sc Кнут}, \TeX\ би требало да се напише:

\startitemize

  \item У типографски форматираним текстовима као што је овај, користећи
  логотип који сам до сада користио: три слова у верзалу, са средњим
  \quote{E} помереним мало наниже, тако да се омогући мањи размак између
  \quote{T} и \quote{X}; или другим речима: \quotation{\TeX}.

  \startSmallPrint

    Да би омогућио писање овог логотипа, {\sc Кнут} је направио
    инструкцију у језику \TeX\ којом се он исписује у финални документ:
    \PlaceMacro{TeX}\tex{TeX}.

  \stopSmallPrint

  \item У неформатираним текстовима (као што је имејл, или текст фајл),
  са \quote{T} и \quote{X} у верзалу, а средњим \quote{e} у куренту;
  дакле: \quotation{TeX}.

\stopitemize

Ова конвенција наставља да се користи у свим системима који се заснивају
на систему \TeX\ тако да укључе своје исправно име, као што је случај са
системом \ConTeXt. Када се пише у текст режиму требало би да напишемо
\quotation{ConTeXt}.

\startsubsection [reference=sec:engines,title=\TeX\ машине,bookmark=TeX машине]

Програм \TeX\ је слободан {\em libre} софтвер: његов изворни кôд је
јавно доступан и свако може да га користи или мења како год жели, само
уз услов да ако се направе измене, резултат више не сме да се назива
\quotation{\TeX}. Ово је разлог што су се током времена појавиле извесне
адаптације програма које су у њега уводиле различита побољшања, а која
се уопштено називају {\em \TeX\ машине}. Уз оригинални \TeX\ програм,
главне машине су, по хронолошком редоследу појављивања, \pdfTeX, \eTeX,
\XeTeX\ и \LuaTeX. Свака од њих би требало да уводи побољшања у односу
на претходну. С друге стране, ова побољшања, све до појаве \LuaTeX\
машине, нису утицала на сам језик, већ само на улазне фајлове, излазне
фајлове, управљање изворима и рад макроа на ниском нивоу.

\startSmallPrint

  Питање употребе \TeX\ машине је једно од питања о којем се у \TeX\
  свету највише расправља. Ово питање нећу да разматрам овде јер
  \ConTeXt\ Mark~IV функционише само са LuaTeX. У суштини, у \ConTeXt\
  свету, дискусија о \TeX\ {\em машинама} постаје дискусија о томе да ли
  да се користи Mark~II (који ради са PdfTeX и XeTeX) или Mark~IV (који
  ради само са LuaTeX).

\stopSmallPrint

\stopsubsection

\startsubsection [title=Формати који су изведени из \TeX,bookmark=Формати који су изведени из TeX]

Језгро или срце система \TeX\ разуме само скуп од око 300 веома основних
инструкција, које се називају {\em примитиве}, и које су погодне за
словослагачке операције и функције програмирања. Већина ових функција су
веома {\em ниског нивоа}, што у компјутерској терминологији значи да их
компјутери лакше разумеју него људи, јер се тичу елементарних операција
типа \quotation{помери овај карактер 0,000725 милиметара навише}. Тако
да је {\sc Кнут} увидео да би \TeX\ требало да има могућност
проширивања, што значи да би требало да постоји механизам који омогућава
да се дефинишу инструкције на вишем нивоу, инструкције које људи лакше
разумеју.  Ове инструкције, које се у време извршавања разбијају на
једноставније инструкције, називају се {\em макрои}. На пример, \TeX\
инструкција која штампа (\tex{TeX}) логотип, се у време извршавања
разлаже на следећи начин:

\vbox{\starttyping 
T 
\kern -.1667em 
\lower .5ex 
\hbox {E} 
\kern -.125em 
X
\stoptyping}\blank[nowhite]

Али за људско биће је много једноставније да разуме и упамти како
једноставна команда \quotation{\PlaceMacro{TeX}\type{\TeX}} извршава
типографске операције неопходне да се испише логотип.

\startSmallPrint

  У суштини је разлика између онога шта је {\em макро} и онога шта је
  {\em примитива} битна само из перспективе \TeX\ програмера. Из
  перспективе корисника, то су све {\em инструкције} или, ако вам више
  одговара, {\em команде}. {\sc Кнут} их је називао {\em контролни
  низови}.

\stopSmallPrint

Ова могућност проширивања језика помоћу {\em макроа} је једна од
карактеристика које су учиниле \TeX\ тако моћним алатом. У суштини, сам
{\sc Кнут} је сачинио око 600 макроа који, заједно са 300 примитива,
чине формат који се назива \quotation{Plain \TeX}. Врло је уобичајено да
се \TeX\ замени са Plain \TeX, а заправо се све што је написано или
речено о \TeX, уствари односи на Plain \TeX. Књиге које тврде да су о
\TeX\ (укључујући и базичну \quotation{{\em The \TeX Book}}), у суштини
говоре о Plain \TeX; и они који верују да раде директно са \TeX\ у
суштини раде са Plain \TeX.

Plain \TeX\ је оно што се у \TeX\ терминологији назива {\em формат}, а
састоји се од опсежног скупа макроа, заједно са одређеним правилима
синтаксе који одређују како и када треба да се користе. Током времена су
уз Plain \TeX\ развијени и остали {\em формати}, од којих вреди поменути
\LaTeX, детаљни скуп макроа за \TeX\ који је 1985. године направио {\sc
Лесли Лампорт} и који представља систем изведен из \TeX\ који се
вероватно најчешће користи у академском, технолошком и математичком
свету. \ConTeXt\ је (или је почео да буде), на сличном нивоу као и
\LaTeX, формат настао из \TeX.

Обично уз ове {\em формате} долази програм који у меморију учитава
макрое који их сачињавају пре позивања програма \MyKey{tex} (или машине
која се користи за обраду) да обради изворни фајл.  Али мада сви ови
формати уствари извршавају \TeX, пошто сваки од њих, посматрано из угла
корисника, поседује различите инструкције и различита синтаксна правила,
сваки од њих можемо схватити као {\em различити језик}. Сви они узимају
инспирацију из \TeX, али се разликују од језика \TeX\ и једни од других.

\stopsubsection
\stopsection

\startsection [title=\ConTeXt, reference=sec:ctx,bookmark=ConTeXt]

Мада је у суштини \ConTeXt\ започет као \TeX\ {\em формат}, он је данас
много више од тога. \ConTeXt\ садржи:

\startitemize[n]

  \item Веома опширан скуп \TeX\ макроа. Ако Plain \TeX\ садржи око 900
  инструкција, \ConTeXt\ их има око 3500; а ако додамо и имена
  различитих опција које поседују ове команде, говоримо о речнику од око
  4000 речи. Речник је тако велики због \ConTeXt\ стратегије да олакшавање
  његовог учења значи увођење било ког броја синонима за команде и опције.

  \startSmallPrint

    Ако је потребно постићи неки ефекат, намера је да  онда за сваки од
    начина на који би енглески говорник могао да назове тај ефекат
    постоји команда или опција која га постиже – што би требало да олакша
    употребу језика.  На пример, ако желите истовремено да добијете црни
    слог и курзив, \ConTeXt\ вам обезбеђује три инструкције које постижу
    исти резултат: \type{\bi}, \type{\italicbold} и \type{\bolditalic}.

  \stopSmallPrint

  \item Слично опширан скуп макроа за \MetaPostLogo, графички програмски
  језик изведен из језика \MetaFontLogo, језика за дизајн словних ликова
  који је {\sc Кнут} развио заједно са програмом \TeX.

  \item Разне {\em скрипте} развијене за језик {\sc Perl} (најстарије),
  {\sc Ruby} (неке такође старе, неке баш и не) и {\sc Lua}
  (најсвежије).

  \item Интерфејс који интегрише \TeX, \MetaPostLogo, {\sc Lua} и XML,
  који омогућава писање документа користећи било који ид ових језика,
  или мешање елемената из неког од њих.

\stopitemize

\startSmallPrint

  Да ли сте разумели претходно објашњење? Не брините о томе. У њему сам
  употребио доста компјутерског жаргона и поменуо многе програме и
  језике. Да бисте користили \ConTeXt, није неопходно да познајете све
  његове разне компоненте.  Битна ствар у овој фази учења је да имате на
  уму да систем \ConTeXt\ интегрише многе алате из различитих извора тако
  да сви заједно чине {\em словослагачки систем}.

\stopSmallPrint

Ова последња особина интеграције алата различитог порекла је разлог што
кажемо да је \ConTeXt\ \quotation{хибридна технологија} намењена
словослагању докумената.  Ја сматрам да то \ConTeXt\ претвара у изузетно
напредан и моћан систем.

Мада је \ConTeXt\ много више од колекције \TeX\ макроа, он је још увек
заснован на систему \TeX, па је то разлог што се овај документ, за који
не тврдим да је нешто више од {\em увода}, фокусира на ту чињеницу.

С друге стране, \ConTeXt\ је модернији од \TeX\ система. Када је креиран
\TeX, компјутери су тек почели да се појављују и били смо далеко од тога
да схватимо како ће изгледати (постати) свет интернета и мултимедије. У
овом погледу \ConTeXt\ природно интегрише неке од ствари које су одувек
биле нешто као страно тело у систему \TeX, као што је укључивање
графике, управљање бојама, хиперлинкови у електронским документима,
подразумевање величине папира која је погодна за документ намењен
приказу на екран, итд.

\startsubsection 
  [ 
    reference=sec:historyctx, 
    title=Кратка историја система \ConTeXt,
    bookmark=Кратка историја система ConTeXt
  ]

\ConTeXt{} је рођен отприлике у 1991. години. Направили су га {\sc Ханс
Хаген} и {\sc Тон Отен} у холандској компанији за дизајнирање и обраду
докумената која се назива \quotation{{\em Pragma Advanced Document
Engineering}}, што се обично скраћује на Pragma ADE. Почео је као
колекција \TeX\ макроа који су имали холандска имена и незванично се
звао {\em Pragmatex}. Био је намењен запосленима у компанији који немају
техничко образовање, а који су морали да управљају многим детаљима
уређивања словослагачких докумената и који нису навикли на употребу
језика за означавање или интерфејса на неком језику који није холандски.
Због тога је прва верзија система \ConTeXt{} написана на холандском.
Идеја је била да се креира довољан број макроа са униформним и
конзистентним интерфејсом.  {\em Пакет} је отприлике у 1994. години
постао довољно стабилан да се напише корисничко упутство на холандском,
па је током 1996. године, на иницијативу {\sc Ханса Хагена}, почео да
узима име \quotation{\ConTeXt{}}. Тврди се да ово име значи
\quotation{Текст са \TeX} (употребом латинског предлога \quote{con} који
значи \quote{са}), али је у исто време и игра речи на енглеском (и
холандском) од речи \quotation{контекст}. Дакле, иза имена стоји
трострука игра речи у којој се налазе \quotation{\TeX}, \quotation{text}
и \quotation{context}.

\startSmallPrint

  Дакле, пошто је његово име засновано на игри речи, \ConTeXt\ би
  требало да се изговара \quote{контекст} а не \quote{контехт}, јер би се
  на тај начин изгубио смисао игре са речима.

\stopSmallPrint

Превод интерфејса на енглески је почео отприлике у 2005. години, па је
тако настала верзија позната под именом \ConTeXt\ Mark~II, где се
\quote{II} објашњава тиме што је у главама програмера претходна верзија
на холандском била Верзија~\quote{I}, мада се званично никада није тако
звала.  Када се интерфејс превео на енглески, употреба система је почела
да се шири ван Холандије, па је интерфејс преведен на и на друге европске
језике, као што су француски, немачки, италијански и румунски. Ипак,
\quotation{званична} документација система \ConTeXt{} је обично базирана
на енглеској верзији, и то је верзија којом се бави овај документ.

У својој почетној верзији, \ConTeXt\ Mark~II је радио са \pdfTeX\ {\em
\TeX\ машином}. Али касније, појавом \XeTeX\ {\em машине}, \ConTeXt\
Mark~II је измењен тако да се дозволи употреба ове нове машине којом је
уведено више предности у односу на \pdfTeX. Али када је неколико година
касније стигла \LuaTeX, донета је одлука да се \ConTeXt{} интерно
реконфигурише тако да интегрише све додатне могућности које је нудила ова
нова машина. И тако је рођен \ConTeXt\ Mark~IV, представљен 2007.
године, непосредно након представљања \LuaTeX\ машине. Врло је вероватно
да је један од одлучујућих фактора за одлуку да се \ConTeXt\
реконфигурише тако да се прилагоди за \LuaTeX\ био тај што су два од три
главна програмера система \ConTeXt{}, {\sc Ханс Хаген} и {\sc Тако
Хекватер}, такође били део главног тима који је развијао \LuaTeX. То је
разлог што су \ConTeXt\ Mark~IV и \LuaTeX\ били рођени у исто време и
заједно развијани. Између \ConTeXt{} и \LuaTeX\ постоји синергија која
не постоји ни у једном другом деривату система \TeX; сумњам да било који
други може боље да искористи предности \LuaTeX\ машине од система
\ConTeXt{}.

Постоји много разлика између Mark~II и Mark~IV, мада је већа њих {\em
интерна}, то јест, оне се тичу начина на који макрои функционишу на
ниском нивоу, тако да се те разлике из угла корисника ни не примећују:
име и параметри макроа остају исти. Међутим, неке разлике утичу и на
интерфејс, па приморавају да се ствари у једној верзији раде другачије
него у другој.  Постоји релативно мало таквих разлика, али оне утичу на
важне аспекте, као на пример, кодирање улазног фајла, или обрада фонтова
инсталираних на систему.

\startSmallPrint

  Било би заиста корисно када би негде постојао документ који објашњава
  (или барем наводи) битне разлике између Mark~II и \Conjecture Mark~IV.
  На пример, у \ConTeXt\ викију, за сваку \ConTeXt\ команду постоје {\em
  две врсте синтаксе} (које су често идентичне). Претпостављам да једна
  важи за Mark~II а друга за Mark~IV; па према овој претпоставци, такође
  претпостављам да је {\em прва верзија} за Mark~II. Али истина је да нам
  вики не говори ништа о овоме.

\stopSmallPrint

Чињеница да има мало разлика на нивоу језика значи да у већини
случајева, уместо да говоримо о две верзије, говоримо о две
\quotation{варијанте} система \ConTeXt{}. Без обзира на то да ли их
зовете овако или онако, чињеница је да у општем случају документ
припремљен за Mark~II не може глатко да се компајлира са Mark~IV и
обрнуто; а ако документ меша обе верзије, највероватније се неће
исправно компајлирати ни на једној верзији; па то повлачи да аутор
изворног фајла мора донети одлуку да ли жели да пише за Mark~II или за
Mark~IV.

\startSmallPrint

  Ако радимо са различитим верзијама система \ConTeXt{}, добар трик за
  прављење разлике на први поглед између фајлова намењених за Mark~II и
  оних намењених за Mark~IV је да се употреби различита екстензија за име
  фајла.  Тако, на пример, свим фајловима које пишем за Mark~II, стављам
  \MyKey{.mkii} као екстензију, а \MyKey{.mkiv} за оне написане за
  Mark~IV. Истина је да \ConTeXt{} очекује да сви изворни фајлови имају
  \MyKey{.tex} екстензију, али екстензију фајла можемо да променимо ако је
  експлицитно наведемо када позивамо \ConTeXt{} над фајлом.

\stopSmallPrint

\ConTeXt{} дистрибуција инсталирана на викију, \suite-, садржи обе
верзије, па да би се спречила забуна – претпостављам – користи
различиту команду за компајлирање фајла сваке верзије. Mark~II
компајлира командом \MyKey{texexec}, а Mark~IV командом \MyKey{context}.

\startSmallPrint

  Уствари су обе команде, \MyKey{context} и \MyKey{texexec}, {\em
  скрипте} са различитим опцијама које извршавају {\sc Lua} {\em
  скрипту} \MyKey{mtxrun}.
  

\stopSmallPrint

Данас је Mark~II замрзнут, а Mark~IV наставља да се развија, што значи
да се нове верзије Mark~II објављују само када се пронађу грешке или
проблеми који морају да се исправе, док се нове верзије Mark~IV редовно
објављују; понекада два или три пута месечно, мада у већини случајева
\quotation{нове верзије} не уносе уочљиве измене језика, већ су
ограничене на унапређење имплементације команде на ниском нивоу, или на
ажурирање неких од многих упутстава која се испоручују у дистрибуцији.
Свеједно, ако инсталирамо развојну верзију – што топло препоручујем, а
то је и оно што се подразумевано инсталира са \suite-{} – има смисла да
с времена на време ажурирамо своју верзију (погледајте
\in{Додатак}[installation_suite] у којем се говори како ажурирати
\suite- верзију).

\startSmallPrint

\startsubsubsubsubject 
  [title=LMTX и остале алтернативне Mark~IV имплементације]

Програмери система \ConTeXt{} су природно неуморни, тако да нису
обуставили развој система \ConTeXt{} са Mark~IV; још увек се тестирају
нове верзије и експериментише се са њима, мада се у општем случају оне
врло мало разликују од Mark~IV и не испољавају некомпатибилност
компајлирања која постоји између Mark~IV and Mark~II.

Тако да је развијено неколико малих варијанти Mark~IV под називима
Mark~VI, Mark~IX и Mark~XI. Од свих њих, на \ConTeXt{} викију сам успео
да пронађем само малу референцу на Mark~VI, где се каже да је разлика у
односу на Mark~IV само у могућности дефинисања команди доделом
именованих параметара а не бројева, као у традиционалном систему \TeX,
дакле на начин како се то обично ради у скоро свим програмским језицима.

Верујем да је у \ConTeXt{} свету појава нове верзије под називом LMTX
много важнија од ових малих варијација.  LMTX је акроним од \LuaMetaTeX:
нове \TeX\ {\em машине} која представља поједностављену верзију \LuaTeX,
развијена са циљем уштеде компјутерских ресурса; што значи да LMTX
захтева мање меморије и мање процесорске снаге од \ConTeXt\ Mark~IV.

LMTX је представљен у пролеће 2019. године и може да се претпостави да
неће захтевати било какву спољашњу измену Mark~IV језика. За аутора овог
документа није било никакве разлике док је радио на њему; али када се
компајлира, потребно је да се изабере да ли желите то да радите са
\LuaTeX, или са \LuaMetaTeX. У \in{додатку}[installation_suite], који се
тиче инсталације система \ConTeXt, приказана је процедура за доделу
другачијег имена команде за сваку од инсталација
(\in{одељак}[sec:alias]).

\stopsubsubsubsubject 

\stopSmallPrint

\stopsubsection

\startsubsection [title=\ConTeXt\ у односу на \LaTeX,
		  bookmark=ConTeXt у односу на LaTeX]

Пошто је \LaTeX{} најпопуларнији формат изведен из \TeX{}, неизбежно је
поређење између њега и система \ConTeXt. Јасно је да говоримо о
различитим језицима који су донекле у вези, јер и један и други
проистичу из \TeX\ језика; однос је сличан ономе између, рецимо, шпанског и
француског језика: језика који имају заједничко порекло (латински) што
значи да су њихове синтаксе {\em сличне} и да за многе речи у сваком
од ових језика постоји врло слична у оном другом. Али за разлику од ове
{\em породичне сличности}, \LaTeX\ и \ConTeXt\ се разликују у својој
филозофији и имплементацији, пошто су почетни циљеви сваког од њих у
некој мери супротни.  \LaTeX\ тврди да олакшава употребу \TeX,
издвајајући аутора од конкретних типографских детаља тако да може да се
концентрише на садржај, остављајући систему \LaTeX\ типографске детаље.
Ово значи да се по цену поједностављења употребе система \TeX\
ограничава огромна флексибилност самог \TeX\ тако што се унапред дефинишу
основни формати и ограничава број типографских проблема које аутор мора да
реши.  Супротно од ове филозофије, \ConTeXt\ је рођен у компанији која
је посвећена словослагању докумената. Стога, нипошто се не жели
изоловање аутора од типографских детаља, већ је циљ да се аутору омогући
апсолутна и комплетна контрола над њима. Да би се то постигло, \ConTeXt\
обезбеђује униформни, конзистентан интерфејс који је много ближи
оригиналном духу система \TeX\ него што је то \LaTeX.

Ова разлика у филозофији и основним циљевима се затим преноси на разлику
у имплементацији. \LaTeX\ тежи да упрости ствари колико год је то
могуће, тако да нема потребе да користи све ресурсе система \TeX. На
неки начин, његово језгро је прилично једноставно. Па када се јави
потреба да се његове могућности прошире, неопходно је да се експлицитно
напише {\em пакет} који то имплементира. Ова {\em пакетизација}
придружена систему \LaTeX\ је у исто време и врлина и мана: врлина је,
јер услед огромне популарности система \LaTeX, уз великодушност његових
корисника, то значи да је скоро све што можемо пожелети да урадимо неко
пре нас већ имплементирао, па постоји пакет за то; али је такође и мана,
јер често ови пакети нису компатибилни међусобно и синтакса коју користе
није увек униформна.  Ово значи да рад са системом \LaTeX\ захтева
константну претрагу кроз хиљаде постојећих пакета који могу да задовоље
неку потребу, уз обезбеђивање услова да сви заједно раде онако како се
очекује.

За разлику од једноставности \LaTeX\ језгра, коју допуњава његова
проширивост кроз пакете, \ConTeXt\ је дизајниран тако да су у њега
укључене све – или скоро све – типографске могућности система \TeX,
тако да је његова концепција више монолитна, мада у исто време и више
модуларна.  \ConTeXt\ језгро нам дозвољава да урадимо скоро све, уз
гаранцију да неће бити некомпатибилности између различитих алата, неће
бити потребно да се истраже проширења за испуњавање неке потребе, а
синтакса језика се не мења само из разлога што нам је потребан одређени
алат.

Тачно је да \ConTeXt\ поседује нешто што се назива {\em модули}
проширења, за које неко може да каже како обављају функцију сличну
\LaTeX\ пакетима, али чињеница је да они функционишу на различите
начине: \ConTeXt\ модули су дизајнирани тако да само укључе додатне
могућности које, из разлога што су још у експерименталној фази, још увек
нису постале део језгра, или да се дозволи приступ проширењима које је
направио неко ван \ConTeXt\ развојног тима.

Ја лично не сматрам да је било која од ове две {\em филозофије} боља од
оне друге. Питање зависи од корисниковог профила и тога шта он или она
жели. Ако корисник не жели да се носи са типографским проблемима, већ
једноставно да прави стандардизоване документе високог квалитета,
вероватно би било боље да се определи за систем као што је \LaTeX; с
друге стране, корисник који воли да експериментише, или којем је
потребна контрола све до најситнијег детаља документа, или неко ко је
осмислио специјалан распоред за документ, вероватно треба да користи
систем као што је \ConTeXt, у којем аутор има потпуну контролу; наравно,
уз ризик да не зна како исправно да користи ту контролу.

\stopsubsection

\startsubsection 
  [title=Добро разумевање динамике рада у систему \ConTeXt,
  bookmark=Добро разумевање динамике рада у систему ConTeXt]

Када радимо са системом \ConTeXt, увек почињемо тако што пишемо текст
фајл (који називамо {\em изворни фајл}), у којем се, заједно са
садржајем финалног документа, налазе и инструкције (у \ConTeXt-жаргону)
које наводе како тачно желимо да се документ форматира: општи изглед
његових страница и пасуса, маргине које желимо да доделимо одређеним
пасусима, фонт којим желимо да се прикаже текст, фрагменти које желимо
да се прикажу употребом другачијег фонта, итд.  Када напишемо изворни
фајл, у терминалу над њим извршавамо програм \MyKey{context}, који ће га
обрадити и генерисати из њега другачији фајл у којем ће садржај нашег
изворног документа бити форматиран сагласно са инструкцијама које смо
навели у изворном фајлу.  Овај излазни фајл би могао да се пошаље у
(комерцијалну) штампарију, прикаже на екрану, постави на интернет или да
се дистрибуира контактима, пријатељима, клијентима, учитељима,
ученицима… или другим речима, свима којима је намењен.

Ово значи да када ради у систему \ConTeXt\ аутор ради са фајлом чији
изглед нема везе са изгледом финалног документа: фајл са којим аутор
непосредно ради је текст фајл који није типографски форматиран.  Тако да
\ConTeXt\ функционише на другачији начин од програма познатих под именом
{\em текст процесори,} који још у време писања приказују коначни изглед
документа који се уређује.  У почетку ће онима који су навикли на текст
процесоре начин рада у систему \ConTeXt\ бити чудан, па ће чак бити
потребно и извесно време да се навикну на то.  Међутим, када се неко
навикне на такав рад, он схвата да је уствари овај другачији начин рада
који прави разлику између радног фајла и коначног резултата, из многих
разлога у суштини предност. Ја ћу овде, без икаквог одређеног редоследа
да истакнем неке од тих предности:

\startitemize[n,broad]

  \item Текст фајлови су \quote{лакши} за обраду од бинарних
  фајлова текст процесора, за уређивање је потребно мање компјутерске
  меморије, мања је вероватноћа да ће се искварити и не постају нечитљиви
  када се промени верзија програма који их је креирао.  Компатибилни су са
  било којим оперативним системом и могу да се уређују многим текст
  едиторима, тако да за рад са њима није потребно да компјутерски систем
  има инсталиран програм који је креирао фајл: биће довољан било који
  други програм за уређивање; а сваки компјутерски систем увек поседује
  неки програм за уређивање текста.

  \item Прављење разлике између радног документа и финалног
  документа помаже да се одвоји стварни садржај документа од онога што
  одређује његов изглед, па се аутору омогућава да се у фази креирања
  концентрише на садржај, а да се на изглед фокусира у словослагачкој
  фази.

  \item Омогућава брзу и прецизну измену изгледа документа, пошто се то
  ради \ConTeXt\ командама које се једноставно проналазе у фајлу.

  \item С друге стране, ова могућност измене изгледа дозвољава да се из
  једног садржаја једноставно креирају две (или више) различите верзије:
  можда је једна верзија оптимизована за штампу на папиру, а друга
  дизајнирана за приказ на екрану, подешена на његову величину и садржи
  хиперлинкове који немају смисла на папирном документу.

  \item Могу лако да се спрече типографске грешке које су честе у текст
  процесорима, као што је продужавање курзива иза последњег карактера
  речи. 

  \item Пошто се радни фајл не дистрибуира и намењен је \quote{само за
  наше очи}, могуће је да се унесу белешке и запажања, коментари, без
  бојазни да ће се појавити у коначном форматираном фајлу који се
  дистрибуира.

  \item Квалитет који може да се постигне истовременом обрадом
  комплетног документа је много већи од квалитета који се постиже
  програмом који типографске одлуке мора да донесе док се документ уноси.

  \item И тако даље.

\stopitemize

Све горе наведено значи, с једне стране, да када се навикнемо на рад у
систему \ConTeXt, постајемо много ефикаснији и продуктивнији, а с
друге стране, да је типографски квалитет који можемо постићи много већи од
онога који може да се постигне такозваним {\em текст процесорима}. И
мада је тачно да се они лакше користе, чињеница је да се не користе {\em
много} лакше. Тачно је да систем \ConTeXt{}, као што смо раније
поменули, садржи 3500 инструкција, обичан корисник система \ConTeXt{} не
мора све да их зна.  Да бисмо урадили оно што се обично ради текст
процесорима, потребно је да знамо само инструкције које нам омогућавају
да назначимо структуру документа, неколико инструкција које се тичу
уобичајених типографских ресурса, као што су црни слог и курзив, и можда
како да генеришемо листу, или фусноту. Све у свему, не више од 15 или 20
инструкција ће нам омогућити да урадимо скоро све ствари које се раде
текст процесором.  Остале инструкције нам омогућавају да урадимо ствари
које обично не можемо да урадимо текст процесором, или које су
компликоване за извођење. Можемо рећи да иако је теже научити коришћење
система \ConTeXt{} него коришћење текст процесора, то је зато што
системом \ConTeXt{} можемо да урадимо много више.

\stopsubsection

\startsubsection 
  [title=Добијање помоћи за систем \ConTeXt,
  bookmark=Добијање помоћи за систем ConTeXt]

Док смо још увек почетници, \goto{вики}[url(wiki)] је несумњиво најбоље
место да се добије помоћ у вези са системом \ConTeXt. Он је пун примера и
има одличан систем претраге, посебно ако добро разумете енглески језик.
Помоћ такође можемо да пронађемо и на интернету, али овде ћемо имати
проблем са игром речи у имену \ConTeXt, јер ће претрага на реч
\quotation{context} да врати милионе резултата од којих већина нема
никакве везе са оним што нас интересује. Да бисте пронашли информације о
систему \ConTeXt\ морате да додате нешто уз реч \quotation{context}; на
пример, \quotation{tex}, или \quotation{Mark IV} или \quotation{Hans
Hagen} (један од креатора система \ConTeXt) или \quotation{Pragma ADE},
или нешто слично. Такође би могло бити од користи да информације тражите
употребом имена викија: \quotation{contextgarden}.

Када научимо нешто више о систему \ConTeXt, можемо да консултујемо неке
од многих докумената који су део \suite-, или да чак потражимо помоћ на
\goto{TeX – LaTeX Stack Exchange}
[url(https://tex.stackexchange.com/)], или на мејлинг листи за \ConTeXt\
(\goto{NTG-context}[url(https://mailman.ntg.nl/mailman/listinfo/ntg-context)]).
Ову листу прате људи који знају већину ствари које се тичу система \ConTeXt,
али правила добре сајбер етикеције захтевају да смо се пре постављања
питања и сами заиста потрудили да дођемо до одговора.

\stopsubsection

\stopsection

\stopchapter

\stopcomponent

%%% Local Variables:
%%% mode: ConTeXt
%%% mode: auto-fill
%%% TeX-master: "../introCTX.mkiv"
%%% coding: utf-8-unix
%%% End:
%%% vim: tw=72:
