%%% Фајл:     b02_FirstDoc.mkiv
%%% Аутор:    Joaquín Ataz-López
%%% Започето: Март 2020
%%% Завршено: Април 2020
%%% Садржај:  Чинило ми се погодним за увод да понудим пример. У
%%%	      „The TeX Book” Кнут почиње тако што приказује неке примере
%%%	      начина за извршавање програма tex. Проблем је што када се
%%%	      ConTeXt компајлира, он не очекује да корисник разреши
%%%	      потенцијалне грешке _током компајлирања_, што ме оставља
%%%	      скоро без материјала за ово поглавље. Такође нисам успео
%%%	      да проверим шта многе which ConTeXt опције раде. И што се
%%%	      тиче грешака и начина како се решавају, за разлику од
%%%	      непостојећих команди, никада нисам сигуран да ли ће грешка
%%%	      да проузрокује грешку компајлирања или не.  Колико могу да
%%%	      знам, непостојеће опције или неадекватне вредности никада
%%%	      не генеришу грешке компајлирања, а неодговарајућа окружења
%%%	      која нису исправно затворена иг генеришу само понекад.
%%%	      Инспирацију за ово поглавље сам добио делимично из
%%%	      поглавља II књиге «El libro de LaTeX», коју су написали
%%%	      Бернардо, Хозе Мануал и остали.
%%%
%%% Уређивано са: Emacs + AuTeX - и повремено са vim + context-plugin
%%%

% \environment ../introCTX_env.mkiv

\startcomponent b02_FirstDoc.mkiv

\startchapter
  [reference=cap:firstdoc, title=Наш први изворни фајл]

\TocChap

Ово поглавље је посвећено нашем првом експерименту и објасниће основну
структуру \ConTeXt\ документа, као и најбоље стратегије за исправљање
потенцијалних грешака.

\startsection
  [title=Припрема експеримента: неопходни алати]

Да бисмо написали и компајлирали први изворни фајл, потребно је да на
систему имамо инсталиране следеће алате.

\startitemize[n]

  \item {\bf Текст едитор} за писање тест фајла. Постоји много текст
  едитора и тешко је замислити оперативни систем који већ нема неки
  преинсталиран.  Можемо користити било који од њих: постоје једноставни,
  сложенији, моћнији, неки које морате да платите, неки бесплатни (тј.
  {\em гратис}), неки слободни (као {\em libre}), неки који су
  специјализовани за \TeX\ системе, а неки служе за општу примену, итд.
  Ако смо навикли да радимо у одређеном едитору, најбоље би било да
  наставимо да га користимо; ако у овом тренутку нисте навикли да радите
  ни са једним, мој савет је да најпре пронађете једноставни едитор, тако
  да уз комплексност учења система \ConTeXt\ не морате учити и како да
  користите текст едитор.  Мада је тачно да су често програми који су
  најкомпликованији за учење они који су најмоћнији.

  Овај текст сам написао користећи GNU Emacs, један од најмоћнијих и
  свестраних едитора опште намене који постоји; тачно је да има одређене
  специфичности и особине које га одвраћају од потенцијалних корисника,
  али у суштини има више \quotation{{\em Emacs-љубитеља}} него
  \quotation{{\em Emacs-хејтера}}. Постоји GNU Emacs екстензија под
  називом AucTeX која служи за рад са \TeX\ фајловима или неким од његових
  деривата. Она едитору обезбеђује неке врло интересантне додатне алате,
  мада је AucTeX у суштини боље припремљен за рад са \LaTeX\ него са
  \ConTeXt\ фајловима.  GNU Emacs у комбинацији са AucTeX би могао да буде
  одлична опција ако не знате који едитор да изаберете; и један и други су
  {\em libre} програми, тако да постоје верзије са све оперативне системе.
  Уствари, изјављивање како је GNU Emacs {\em софтвер libre} је
  потцењивање, јер овај програм боље него било који други отеловљује дух и
  значење {\em слободног софтвера}. На крају, његов главни програмер је
  био {\sc Ричард Столмен} оснивач и идеолог GNU пројекта и {\em Фондације
  слободног софтвера}.

  Слично као и GNU Emacs + AucTeX, остале добре опције, у случају да не
  знате шта да изаберете, су {\em Scite} и {\em TexWorks}. Овај први,
  мада је едитор опште намене који није посебно дизајниран за рад са
  \ConTeXt\ фајловима, једноставно се прилагођава и, како је то едитор
  који у општем случају користе \ConTeXt\ програмери, \suite- садржи
  конфигурационе фајлове за овај едитор које је написао сам {\sc Ханс
  Хаген}. С друге стране, {\em TexWorks} је брз едитор који је
  специјализован за обраду \TeX\ фајлова и фајлова језика изведених из
  њега. Веома је једноставно да се подеси за рад са \ConTeXt\ и \suite-
  такође доставља његову конфигурацију.

  Који год едитор да изаберемо, једина ствар коју не смемо да користимо
  као текст едитор је {\em текст процесор} као што је, на пример,
  OpenOffice Writer или Microsoft Word. Ови програми, по мом мишљењу
  преспори и тешки, могу, ако се то експлицитно назначи, да сачувају фајл
  као \quote{чисти текст (txt)}, али они нису дизајнирани за тако нешто,
  па ћемо највероватније завршити са фајлом сачуваним у неком бинарном
  формату који није компатибилан са системом \ConTeXt.

  \item {\bf \ConTeXt} дистрибуција за обраду нашег тест фајла. Ако на
  вашем систему већ постоји \TeX\ (или \LaTeX) инсталација, врло је
  вероватно да је инсталирана и верзија система \ConTeXt. Да бисте то
  проверили, довољно је да покренете терминал и откуцате

  {\tt \$> }\type{context –version}

  \startSmallPrint

    {\bf НАПОМЕНА} за оне који нису раније користили терминале, прва два
    карактера која сам написао (\quotation{\$>}) се не пишу у терминал.
    Једноставно сам приказао оно што се назива терминалски {\em одзив}; мали
    трепћући знак који означава да терминал очекује ваше инструкције.

  \stopSmallPrint

Ако је верзија \ConTeXt\ система већ инсталирана, појавиће се нешто
слично следећем:

{\tfx\vbox{\starttyping
  mtx-context     | ConTeXt Process Management 1.03
  mtx-context     |
  mtx-context     | main context file: /home/jq/context/LMTX/tex/texmf-context/
                  | tex/context/base/mkiv/context.mkiv
  mtx-context     | current version: 2020.04.30 11:15
  mtx-context     | main context file: /home/jq/context/LMTX/tex/texmf-context/
                  | tex/context/base/mkiv/context.mkxl
  mtx-context     | current version: 2020.04.30 11:15
  \stoptyping}}

  Последња линија нас обавештава о датуму објављивања инсталиране
  верзије. Ако је то сувише старо, требало би или да је ажурирамо, или да
  инсталирамо нову верзију. Препоручујем да се инсталира дистрибуција под
  називом \suite- чија упутства за инсталацију можете да пронађете на
  \goto{ \ConTeXt\ викију}[url(wiki)]. Преглед свега овога можете пронаћи
  у \in{додатку}[installation_suite] .

  \item {\bf Читач PDF фајлова}, тако да на екрану можемо да видимо
  резултат нашег експеримента. На Windows и Mac OS увек постоји Adobe
  Acrobat Reader. Ако подразумевано није инсталиран (или није када сам
  престао да користим Microsoft Windows пре више од 15 година), али се
  то уради први пут када покушате да отворите PDF фајл, тако да је
  највероватније преинсталиран.  Linux/Unix системи немају тренутну
  верзију Acrobat Reader програма, али вам није ни потребна јер је
  доступно буквално на десетине бесплатних и веома добрих PDF читача.
  Осим тога, скоро увек је неки од њих подразумевано инсталиран на овим
  системима.  Из разлога брзине и једноставности употребе, мој омиљени
  је MuPDF; мада има неке лоше стране ако користите друге језике осим
  енглеског са акцентованим карактерима, и не дозвољава вам да изаберете
  текст или да документ пошаљете на штампач; то је једноставно читач;
  али веома брз и лак за употребу. Када су ми потребне могућности које
  не MuPDF не поседује, обично користим или Okular, или qPdfView. Али
  још једном, то је ствар укуса: можете изабрати шта год вам одговара.

\stopitemize

Можемо да изаберемо свој едитор, свој PDF читач, своју \ConTeXt\ дистрибуцију…
Добродошли у свет {\em слободног libre софтвера}!

\stopsection

\startsection
  [title=Сам експеримент]

\startsubsubsubject
  [title=Писање изворног фајла]

Ако су вам алати поменути изнад већ доступни, потребно је да отворите
свој текст едитор и да њиме креирате фајл који ћемо назвати
\quotation{odmor.tex}. Као садржај фајла ћемо написати ово што следи:

\startframedtext
\starttyping
% Прва линија документа

\mainlanguage[sr] % Језик = српски

\setuppapersize[S5] % величина папира

\setupbodyfont
  [dejavu,12pt] % Фонт = DejaVu Serif, 12 тачака

\setuphead      % Формат поглавља
  [chapter]
  [style=\bfc]

\starttext  % Почетак садржаја документа

\startchapter
  [title=Годишњи одмор…]

Пепсико, Пепсико, хајдемо у Мексико. 
Никада, никада, јер ја немам долара.
Ко има долара, купа се на плажи.
Ко нема долара, кући на гаражи!
Пепсико, Пепсико, хајдемо у Мексико.

\stopchapter

\stoptext % Крај документа

\stoptyping
\stopframedtext

Док се пише, није битно ако се било шта промени, посебно ако се додаје
празни простор или преломи линија. Оно што је битно је да се речи које
следе након \quotation{\tt \backslash{}} напишу тачно како је приказано,
као и садржај унутар витичастих заграда. Остатак може бити другачији.
\stopsubsubsubject

\startsubsubsubject
  [title=Кодирање карактера фајла]

Када напишемо ово изнад, фајл треба да сачувамо на диск, и обезбедимо да
је кодирање карактера UTF-8. Данас је ово кодирање стандардно. У сваком
случају, ако нисмо сигурни, сам едитор нам може показати кодирање, па
ако је потребно, можемо и да га променимо. Начин како се то ради,
очигледно зависи од самог едитора који се користи. На пример, у GNU
Emacs се то ради притиском комбинације тастера CTRL-X, па затим Ентер
након кога следи \quote{f}, у последњој линији прозора (коју GNU Emacs
назива {\em мини-бафер}) ће се појавити порука која од нас захтева ново
кодирање и приказује нам које је текуће кодирање.  У осталим едиторима
се кодирање обично налази у \quotation{Save as} менију.

Када смо проверили да је кодирање исправно и сачували фајл на диск,
затварамо едитор и фокусирамо се на анализирање онога што смо написали.

\stopsubsubsubject

\startsubsubsubject
  [title=Поглед у садржај нашег првог изворног фајла написаног за \ConTeXt]

Прва линија почиње карактером \quotation{{\tt \%}}. Ово је резервисани
карактер који систему \ConTeXt\ говори да не обрађује текст који се
налази између тог карактера и краја линије у којој се он налази. Ово је
корисно када желимо да напишемо коментар на изворни фајл који само аутор
може да чита, пошто он не постаје део финалног документа. У овом примеру
сам употребио тај карактер да привучем пажњу на одређене линије,
објашњавајући шта оне раде.

Линије које почињу са карактером \quotation{{\tt \backslash}}, још
једним од резервисаних карактера у систему \ConTeXt\ који означава да оно
што следи представља име команде.  Овај пример приказује низ команди
које се налазе у \ConTeXt\ изворном фајлу: језик на којем је написан
документ, величина папира, фонт који ће се користити за приказ документа
и начин на који ће се форматирати поглавља.  Касније, у наредним
поглављима ћемо видети детаље ових команди, али за сада је битно само да
читалац види како изгледају ове команде: оне почињу са \quotation{{\tt
\backslash}}, затим долази име команде, па онда између витичастих
заграда или великих заграда, у зависности од ситуације, подаци који су
команди потребни да произведе жељени ефекат.  Између имена команде и
великих или витичастих заграда може да стоји празан простор или преломи
линија.

У деветој линији нашег примера (бројим само линије које у себи садрже
неки текст) налази се важна \tex{starttext} команда: она систему
\ConTeXt\ говори да од те тачке почиње садржај документа; а у последњој
линији нашег примера, видимо команду \tex{stoptext} која говори да је
ово место ка којем се документ завршава. Ово су две веома важне команде
о којима ћу ускоро имати још по нешто да кажем. Између њих се налази
садржај документа, који у овом случају представља шаљиву дечију песмицу.
Написао сам је у форми прозе да бисмо видели начин на који систем
\ConTeXt\ форматира пасус.

\stopsubsubsubject

\startsubsubsubject
  [title=Обрада изворног фајла]

За наредни корак, након што смо потврдили да је систем \ConTeXt\
исправно инсталиран на нашем систему, морамо да отворимо терминал у оном
директоријуму у који је сачуван фајл \quotation{odmor.tex}.

\startSmallPrint

Многи текст едитори нам дозвољавају да компајлирамо документ на којем
смо радили без потребе да отварамо терминал. Ипак, {\em канонска}
процедура за обраду документа системом \ConTeXt\ наводи да се то ради из
терминала, директним извршавањем програма. Кроз цео овај документ ћу то
радити на овај начин (или претпоставити да је урађено тако) из
различитих разлога; први је што не могу да знам који едитор користи
читалац.  Али најважнији је онај што употреба терминала омогућава
приступ екранском излазу програма \MyKey{context} и могуће је да се виде
поруке које исписује програм.

\stopSmallPrint

Ако је \ConTeXt\ дистрибуција коју смо инсталирали \suite-, пре било
чега морамо да извршимо {\em скрипту} која терминалу говори путању и
локацију фајлова који су потребни за извршавање програма \ConTeXt. На
Linux/Unix системима, то се ради тако што се изврши следећа команда:

{\tt \$> }\type{source ~/context/tex/setuptex}

под претпоставком да смо \ConTeXt\ инсталирали у директоријум под именом
\MyKey{context}.

\startSmallPrint

Везано за извршавање {\em скрипте} о којем смо управо говорили,
погледајте шта у \in{додатку}[installation_suite] пише о инсталацији
\suite-.

\stopSmallPrint

Када се у меморију учитају променљиве потребне да се покрене
\MyKey{context}, можемо да га извршимо. То радимо тако што у терминалу
откуцамо

{\tt \$> }\type{context odmor}

Без обзира на то што се изворни фајл назива \MyKey{odmor.tex}, приметите
да смо приликом позивања \MyKey{context} изоставили екстензију фајла.  У
случају да смо фајл назвали \MyKey{odmor.mkiv}, на пример (што обично и
радим како бих могао да знам да је тај фајл написан за Mark~IV), морали
бисмо експлицитно да наведемо екстензију, наводећи \MyKey{context
odmor.mkiv}.

Када у терминалу покренемо \MyKey{context}, на екрану ће се појавити
неколико десетина линија које нам говоре шта \ConTeXt\ ради.  Ове
информације се појављују брзином коју човек не може да испрати, али то
не треба да вас забрине, јер се исте информације чувају и у помоћном
фајлу са екстензијом \MyKey{.log}. Он се генерише у време обраде, па ако
је неоходно, касније можемо на миру да га погледамо.

Неколико секунди касније, ако смо изворни фајл написали без неке озбиљне
грешке, терминалске поруке ће се завршити.  Последња порука нас
обавештава колико је трајало компајлирање фајла.  Први пут је за
компајлирање потребно мало више времена, јер \ConTeXt\ мора да учита у
меморију одређене фајлове који му говоре који фонтови се користе, док су
за накнадна компајлирања они већ учитани.  Када се појави последња
порука која обавештава о дужини компајлирања, обрада је завршена. Ако је
све прошло како треба, сада ће се у директоријуму у којем смо извршили
\MyKey{context} појавити три додатна фајла:

\startitemize[packed]

\item odmor.pdf
\item odmor.log
\item odmor.tuc

\stopitemize

Први од ова три је резултат обраде, или другим речима, коначни
форматирани PDF. Други је \MyKey{.log} фајл у којем се налазе све
информације приказане на екран током обраде изворног фајла; трећи је
помоћни фајл који \ConTeXt\ генерише током компајлирања и који користи
за креирање индекса и унакрсних референци. За сада, ако је све прошло
како треба, можемо да обришемо и ({\tt odmor.log} и {\tt odmor.tuc}).
Ако је било проблема, садржај ових фајлова ће нам помоћи да пронађемо
где је узрок и како да дођемо до решења.

Ако нисмо добили ове резултате, узрок је вероватно то што:

\startitemize [packed]

\item или нисмо исправно инсталирали \ConTeXt\ дистрибуцију, па том
случају, када у терминалу покушамо да извршимо команду \MyKey{context},
видимо поруку \quotation{command unknown}.

\item или наш фајл није UTF-8 кодиран, па долази до грешке у обради.

\item или је можда \ConTeXt\ који је инсталиран на систему Mark~II. У
овој верзији не можемо да користимо UTF-8 кодирање ако се то експлицитно
не наведе у изворном фајлу.  Могли бисмо да преправимо изворни фајл тако
да се исправно компајлира, али пошто се овај увод односи на Mark~IV,
нема смисла да се настави рад са Mark~II: најбоље би било да се
инсталира \suite-.

\item или смо направили грешку у изворном фајлу док смо писали име
команде или уносили податке потребне команди.

\stopitemize

\startSmallPrint

  Ако након почетка извршавања \MyKey{context} команде у терминалу
  крену да се емитују поруке, па се зауставе, а не појави се {\em одзив},
  пре него што наставимо морамо да притиснемо CTRL-X да би прекинули
  извршавање \ConTeXt\ које је зауставила грешка.

\stopSmallPrint

Затим морамо открити шта се догодило и решимо проблем, па наставимо то
да радимо све док се компајлирање не обави успешно.

\placefigure
  [here]
  [odmor]
  {Годишњи одмор…}
  {\midaligned{\framed{\externalfigure[odmor.pdf][width=13cm]}}}

На \in{слици}[odmor] видимо садржај фајла \MyKey{odmor.pdf}. Такође
можемо видети да је \ConTeXt\ нумерисао страницу и поглавље, написао
текст фонтом који смо тражили.  \ConTeXt\ ће подразумевано да прелама
речи на крају реда сагласно правилима изабраног језика, а у нашем
случају прва линија наводи (\tex{mainlanguage[sr]}).

Да сумирамо: \ConTeXt\ је трансформисао изворни фајл и генерисао фајл у
којем имамо документ форматиран сагласно инструкцијама у изворном фајлу.
Нестали су сви евентуални коментари, и што се тиче команди, оно што сада
имамо није име команде, већ резултат извршавања команде.

\stopsubsubsubject

\stopsection

\startsection
  [title=Структура фајла нашег примера]

У пројекту који се развија само у једном изворном фајлу, структура је
веома једноставна и означена командама \tex{starttext} … \tex{stoptext}.
Све што се налази између прве линије фајла и команде \tex{starttext} се
назива {\em преамбула}. Стварни садржај документа се умеће између
команди \tex{starttext} и \tex{stoptext}. У нашем примеру се преамбула
састоји из три глобалне конфигурационе команде: једна наводи језик нашег
документа, (\tex{mainlanguage}), друга наводи величину страница
(\tex{setuppapersize}) која је у нашем случају \quotation{S5} и
представља димензије компјутерског екрана, а трећа команда
(\tex{setuphead}) омогућава да конфигуришемо изглед наслова поглавља.

Тело документа се налази између команди \tex{starttext} и
\tex{stoptext}. Ове команде наводе почетну и крајњу тачку текста који
треба да се обради: између њих треба да поставимо сав текст који желимо
да \ConTeXt\ обради, уз команде које не треба да утичу на комплетан
документ, већ само на одређене делове. За сада, претпоставимо да су
\tex{starttext} и \tex{stoptext} команде обавезне у сваком \ConTeXt\
документу, мада ћемо касније, када будемо говорили о пројектима у више
фајлова (\in{одељак}[sec-projects]), видети да постоје неки изузеци.

\stopsection

\startsection
  [title=Неки додатни детаљи у вези са\\покретањем команде \quotation{{\tt context}},
  bookmark=Неки додатни детаљи у вези са покретањем команде „context”]

Команда \MyKey{context} којом смо раније почели обраду нашег првог изворног
фајла је уствари {\sc Lua} {\em скрипта}, што значи да је то мали
{\sc Lua} програм који после обављања одређених провера позива LuaTeX,
јер он обрађује изворни фајл.

Команду \MyKey{context} можемо да позовемо уз разне опције. Оне се
наводе непосредно након имена команде, тако што се откуцају две цртице.
Ако желимо да наведемо више од једне опције, раздвајамо их размаком.
Опција \MyKey{help} исписује листу свих опција уз кратко објашњење сваке
од њих:

{\sc \$>}\type{context –help}

Следе неке од интересантнијих опција:

\description{{\tt interface}:}

Као што сам већ напоменуо у уводном поглављу, \ConTeXt\ интерфејс је
преведен на разне језике. Подразумевани интерфејс је енглески, међутим,
ова опција нам омогућава да користимо холандски (nl), француски (fr),
италијански (it), немачки (de) или румунски (ro).

\description{{\tt purge, purgeall}:}

Брише помоћне фајлове који су генерисани током обраде.

\description{{\tt result=Name}:}

Наводи име које би требало да добије произведени PDF фајл. Подразумевано
ће бити исто као и име фајла који се обрађује, са екстензијом .PDF.

\description{{\tt usemodule=list:}}

Учитава наведене модуле пре него што покрене \ConTeXt\ (модул је
проширење система \ConTeXt\ које није део његовог језгра и које
обезбеђује неку додатну могућност).

\description{{\tt useenvironment=list:}}

Учитава фајлове окружења пре него што покрене \ConTeXt\ (фајл окружења
је фајл са конфигурационим инструкцијама).

\description{{\tt version}:}

Приказује верзију система \ConTeXt.

\description{{\tt help}:} приказује помоћ у вези са опцијама програма.

\description{{\tt noconsole}:}

Спречава слање порука на екран током компајлирања. Међутим, ове поруке
се ипак чувају у .log фајл.

\description{{\tt nonstopmode}:} Извршава компајлирање без заустављања у
случају грешака. Ово не значи да се грешка не генерише, већ да кад
\ConTeXt\ наиђе на грешку, чак и неку коју може да опорави, он наставља
са компајлирањем све док не стигне до краја, или док не наиђе на грешку
од које не може да се опорави.

\description{{\tt batchmode}:} Комбинација претходне две опције.
Извршава се без прекида и спречава испис порука на екран.

Сматрам да у првим корацима учења система \ConTeXt\ није добра идеја
да се користе последње три опције, јер када дође до грешке нећемо знати где
се она налази или шта ју је изазвало. А верујте ми драги читаоци, пре
или касније ћете имати грешке током обраде.

\stopsection

\startsection
  [title=Управљање грешкама]

Током рада у систему \ConTeXt\ неизбежно је да се пре или касније појаве
грешке током обраде.  Грешке можемо да поделимо у следеће четири
категорије:

\startitemize[n]

\item {\bf Грешке у писању}. Дешавају се када направимо грешку у куцању
имена команде. У овом случају компајлеру шаљемо наредбу коју не разуме.
На пример, када уместо да напишемо команду \tex{TeX} напишемо \tex{Tex}
тако да је последње слово мало \quote{x}, а како \ConTeXt\ прави разлику
између малих и великих слова, он види \quotation{TeX} и \quotation{Tex}
као различите речи; или ако се опције функционисања команде поставе у
велике заграде уместо у витичасте заграде, или ако покушамо да
употребимо резервисане карактере као да су обични итд.

\item {\bf Грешке изостављања}. \ConTeXt\ има инструкције за почетак
задатка чији крај морамо такође експлицитно да означимо; као што је
резервисани карактер \$ за укључивање математичког режима који траје све
док се не искључи, па заборавимо да га искључимо. Онда се генерише
грешка када се наиђе на текст или инструкцију која нема смисла у
математичком режиму.  Исто је и ако започнемо блок текста резервисаним
карактером \quote{\{} или командом \tex{startНешто} па се касније не
пронађе експлицитна команда затварања \quote{\}} или \tex{stopНешто}.

\item {\bf Грешке концепције}. Тако зовем грешке које се јаве када се
позове команда којој су потребни одређени аргументи, али јој се не
доставе, или када није исправна синтакса позива команде.

\item {\bf Грешке ситуације}. Постоје команде које су дизајниране тако
да раде само у одређеним контекстима или окружењима и уопште се не
препознају ван њих. Ово се посебно дешава у математичком режиму: неке
\ConTeXt\ команде раде само док се пишу математичке команде и ако се
позову из неког другог окружења, генерисаће грешку.

\stopitemize

Шта да радимо када нас \MyKey{context}, док обрађује, упозори да је
дошло до грешке?  Очигледно је прва ствар да одредимо шта је грешка.  За
то је потребно да анализирамо \MyKey{.log} фајл који је био генерисан за
време обраде; мада понекад то није неопходно, јер је грешка такве
природе да је тренутно обуставила обраду, па је у том случају порука о
грешки видљива у истом терминалу у којем смо и покренули
\MyKey{context}.

\placefloat
  [here]
  [middle]
  [msgerror]
  {Излаз екрана у случају грешке при компајлирању}
{
\switchtobodyfont[script]
\startframedtext
\starttyping
 4
 5     \setuppapersize[S5] % величина папира
 6
 7     \setupbodyfont
 8       [dejavu,12pt] % Фонт = DejaVu, 12 тачака
 9
10     \setuphead      % Формат поглавља
11       [chapter]
12       [style=\bfc]
13
14 >>  \startext  % Почетак садржаја документа
15
16     \startchapter
17       [title=Годишњи одмор…]
18
19     Пепсико, Пепсико, хајдемо у Мексико.
20     Никада, никада, јер ја немам долара.
21     Ко има долара, купа се на плажи.
22     Ко нема долара, кући на гаражи!
23     Пепсико, Пепсико, хајдемо у Мексико.
24

mtx-context     | fatal error: return code: 256
\stoptyping
\stopframedtext
}

На пример, ако смо у нашем тест фајлу \MyKey{odmor.tex}, грешком уместо
\tex{starttext} написали \tex{startext} (са једним \quote{t}), што је
врло честа грешка, током извршавања команде \MyKey{context odmor} обрада
ће да се прекине и у терминалу ћемо видети информације приказане на
\in{слици}[msgerror]. Ту можемо видети да су линије нашег изворног фајла
нумерисане и да је у једној од њих, у овом случају линији број 14,
између броја и линије текста, компајлер додао \MyKey{>>} да би означио
да је у тој линији наишао на грешку.  Фајл \MyKey{odmor.log} ће нам
пружити још трагова. У нашем примеру фајл није тако велики, јер се извор
који се компајлира знатно скраћен; али у осталим случајевима може да
садржи огромну количину информација.  Али морамо да уронимо у њих. Ако
текст едитором отворимо \MyKey{odmor.log} видећемо да се у њему налази
све што \ConTeXt\ ради. Морамо да пронађемо линију у којој почиње
упозорењем о грешки, а за то можемо употребити функцију претраге
едитора. Потражићемо \quotation{tex error}, па ће нас то довести до
следећих линија:

\starttyping
tex error       > tex error on line 14 in file |
		  ./odmor.tex: Undefined control sequence \undefined 

<line 3.14> 
    \startext
      % Почетак садржаја документа

\stoptyping

\startSmallPrint

{\bf Напомена:} прва линија која нам говори о грешки у фајлу
\MyKey{odmor.log} је доста дугачка. Да би лепше изгледала, имајући у
виду ширину странице, поделио сам је на две линије. Карактер \quote{\|}
приказује тачку поделе.

\stopSmallPrint

Ако обратимо пажњу на три линије поруке о грешки, видећемо да нам прво
говоре у којој линији се налази грешка (линија 14) и које је врсте:
\quotation{Undefined control sequence}, или, што је иста ствар:
непознати контролни низ, то јест непозната команда. Наредне линије лог
фајла приказују линију 14, подељену на тачки која је изазвала грешку.
Тако да нема сумње да се грешка налази у \tex{startext}. Читамо пажљиво
и уз мало среће и искуства, схватамо да смо написали
\quotation{startext} уместо \quotation{starttext} (са два \quote{t}).

Имајте на уму да су компјутери веома успешни и врло брзи у извршавању
инструкција, али веома споро читају наше мисли. А реч
\quotation{startext} није иста као \quotation{starttext}. Програм зна
како да изврши ову другу, али не и прву. Не зна шта да уради са њом.

У другим случајевима грешка неће моћи тако лако да се открије. Посебно
када је грешка у томе да је нешто започето, а није наведено место на
којем треба да се заврши. Понекада би, уместо да у \MyKey{.log} фајлу
тражимо \quotation{tex error}, требало да тражимо звездицу. Овај
карактер на почетку линије не означава фаталну грешку, већ пре
упозорење.  Међутим, упозорења могу бити од помоћи код проналажења
грешака.

А ако информације у \MyKey{.log} фајлу нису довољне, требало би да
прођемо кроз главни фајл, део по део, и тражимо грешку. Добра стратегија
за то је да се промени локација команде \tex{stoptext}. Упамтите да
\ConTeXt\ прекида обраду текста када наиђе на ову команду.  Дакле, ако
поставим команду \tex{stoptext} мање више на половину фајла, па га онда
компајлирам, компајлираће се само прва половина фајла; ако се поново
јави грешка, онда знам да се она налази у првој половини изворног фајла,
а ко се не јави, онда то значи да је у другој половини… па тако, мало по
мало, изменом локације команде \tex{stoptext}, бићемо у могућности да
пронађемо место на коме се налази грешка. Када је пронађемо, можемо
покушати да је разумемо и исправимо, или ако не разумемо зашто долази до
грешке, онда пошто знамо где долази до грешке, можемо покушати да тај
део напишемо на другачији начин и спречимо појаву грешке.  Ово друго
решење може да се примени само ако смо ми аутор. Ако једноставно радимо
словослагање нечијег текста, не можемо да га изменимо и морамо наставити
да истражујемо све док не откријемо узроке грешке и могући начин да је
исправимо.

У пракси, када се системом \ConTeXt\ прави релативно дугачак документ,
он се обично повремено компајлира док се уноси, тако да када дође до
грешке, биће мање више јасно да се она јавља у новом делу, јер се
последњи пут документ успешно компајлирао. Такође ће бити јасније и зашто
долази до грешке.

\stopsection

\stopchapter

\stopcomponent

%%% Local Variables:
%%% mode: ConTeXt
%%% mode: auto-fill
%%% TeX-master: "../introCTX.mkiv"
%%% coding: utf-8-unix
%%% End:
%%% vim:set filetype=context tw=72 : %%%
