%%% Фајл:     b13_Floats
%%% Аутор:    Joaquín Ataz-López
%%% Започето: Август 2020
%%% Довршено: Август 2020
%%% Садржај:  Када сам стигао до овог поглавља, већ сам се уморио од
%%%	      увода. Зато, на пример, постоји објашњење само за једну врсту
%%%	      табела. Од прављења табела (у TeX, LaTeX или ConTeXt)
%%%	      постајем лењ. С друге стране, организација овог поглавља је
%%%	      донекле разноврсна (мар ја тако мислим).  Мени је јасно, али
%%%	      нисам сигуран да ли ће јавност за оно што је по мени
%%%	      генијалан „круг” мислити да не ништа више од озбиљног
%%%	      менталног поремећаја.
%%%
%%% Уређивано са: Emacs + AuTeX - и повремено са vim + context-plugin
%%%

% \environment ../introCTX_env.mkiv

\startcomponent b13_Floats.mkiv

\startchapter
  [title={Слике, табеле и остали плутајући објекти}]

\TocChap

Ово поглавље се углавном бави плутајућим објектима. Али уз овај концепт,
није лоше ни да се објасне два типа објекта која нису обавезно плутајућа,
мада се често конфигуришу као такви: спољне слике и табеле. Ако погледа
садржај овог поглавља, неко би могао помислити да је све прилично
несређено: почиње се причом о плутајућим објектима, затим се говори о
сликама и табелама, па се завршава поново причом о плутајућим објектима.
Разлог ове несређености је {\em педагошке} природе: слике и табеле могу да
се објасне без превише инсистирања на чињеници да су оне обично пливајуће; а
ипак, када почнемо да их истражујемо, од велике помоћи је откриће да, гле
чуда, већ знамо понешто о плутајућим објектима.

\startsection
  [
    reference=sec:floating objects,
    title={Шта су плутајући објекти и шта они раде?},
  ]

Ако би документ садржао само {\em обичан} текст, пагинација би била
релативно једноставна: познајући максималну висину области текста на
страници, довољно је да се измери висина различитих пасуса па да се одреди
где да се уметну преломи страница. Проблем је што у многим документима
постоје објекти, фрагменти или недељиви блокови текста као што су слика,
табела, формула, уоквирени пасус, итд.

Понекад ови објекти могу да заузму већи део странице, што онда представља
проблем да ако је потребно да се објекат уметне на неко одређено место у
документу, можда неће моћи да стане на текућу странцу, па она мора нагло да
се прекине, остављајући велики празан простор на дну, а објекат о коме је
реч и текст након њега се померају на наредну страницу. Међутим, правила
доброг словослагања говоре да на свакој страници треба да буде иста
количина текста, осим на последњој страници поглавља. 

Зато се не препоручује појављивање великих вертикалних празних простора; а
механизам да се то и постигне су {\em плутајући} објекти.
\quotation{Плутајући објекат} је онај који не мора да се нађе на тачно
одређеном месту у документу, већ може да се {\em помера} или да {\em плута}
по документу. Идеја је да се дозволи да \ConTeXt\ из угла пагинације одлучи
које је најбоље место за објекат, да лоцира такве објекте, па чак и да их
постави на другу страницу; али увек покушавајући да га не помери предалеко
од места уметања у изворном фајлу.

Стога, нема објеката који {\em сами по себи} морају да буду пливајући. Али
постоје објекти који ће понекада морати да буду плутајући. У сваком
случају, одлука о томе је на аутору или, ако су то две различите особе, на
особи одговорној за словослагање.

Несумњиво је да могућност померања тачно позиционираних недељивих објеката
помаже код задатка словослагања добро уравнотежених страница; али уз то иде
и проблем што у време када пишемо оригинални документ, не знамо тачно где
ће објекат да заврши, па је тешко да се укаже на њега. Тако на пример, ако
сам у свој документ управо поставио команду која умеће слику и у наредном
пасусу желим да је опишем и напишем нешто као: \quotation{Као што можете
видети из претходне слике}, када слика {\em плута}, лако би могла да се
нађе {\em иза} онога што сам управо написао, па резултат није доследан:
читалац тражи слику {\em испред} текста који указује на њу и не може да је
пронађе јер је након плутања, слика завршила иза те референце.

Ово се исправља {\em нумерацијом} плутајућих објеката (након што се
расподеле по категоријама), тако да уместо указивања на слику као
\quotation{претходна слика} или \quotation{наредна слика}, на њу указујемо
као \quotation{слика 1.3}, јер можемо користити \ConTeXt\ механизам
интерних референци (погледајте \in{одељак}[sec:references]). С друге
стране, нумерација ове врсте објеката олакшава креирање њиховог индекса
(индекс табела, графика, слика, једначина, итд.). Да бисте видели како се
то ради, погледајте (\in{одељак}[sec:lists]).

Механизам управљања плутајућим објектима у систему \ConTeXt\ је прилично
софистициран и на тренутке тако апстрактан да није баш погодан за
почетнике. Зато ћу у овом поглављу почети са објашњењем два одређена
случаја: слика и табела. Затим ћу покушати да то донекле генерализујем,
тако да можемо разумети како да механизам проширимо и на остале врсте
објеката.

\stopsection

\startsection
  [title={Спољне слике}]

Као што у овом тренутку читалац већ зна (јер је објашњено у
\in{одељку}[sec:ctx]), \ConTeXt\ је савршено интегрисан са \MetaPostLogo\ и
може да генерише слике и графику које се {\em програмирају} на сличан начин
као што се програмирају и трансформације текста. Такође постоји и модул
проширења за \ConTeXt\footnote{\ConTeXt\ модули проширења обезбеђују
додатне могућности, али нису део овог увода.} који му омогућава да ради са
TiKZ.\footnote{Ово је графички програмски језик намењен за рад са системима
базираним на \TeX\ систему. То је \quotation{рекурзивни акроним} немачке
реченице \quotation{TiKZ ist keinen Zeichenprogramm} што у преводу значи:
\quotation{TiKZ није програм за цртање}. Рекурзивни акроними су врста
програмерске шале. На страну \MetaPostLogo\ (који не знам како да користим),
верујем да је TiKZ одличан систем за програмирање графике.} Али таквим
сликама се не бавимо у овом уводу (јер би то вероватно удвостручило његову
дужину). Овде мислим на употребу спољних слика које се налазе у фајлу на
нашем хард диску, или које \ConTeXt\ преузима директно са интернета.

\startsubsection
  [title={Директно уметање слика}]
  \PlaceMacro{externalfigure}

За директно уметање слике (не као плутајућег објекта) користимо команду
\tex{externalfigure} чија је синтакса

\type{\externalfigure [Име] [Конфигурација]}

где

\startitemize

\item {\em Име} може да буде или име фајла у којем је слика, или веб адреса
слике на Интернету, или симболичко име које смо претходно придружили слици
користећи \PlaceMacro{useexternalfigure}\tex{useexternalfigure} команду
чији је формат сличан команди \tex{externalfigure} мада као први аргумент
узима симболичко име придруженој слици о којој је реч.

\item {\em Конфигурација} није обавезан аргумент који нам омогућава да пре
уметања слике у документ применимо на њу одређене трансформације. Овај
аргумент ћемо детаљније испитати у \in{одељку}[sec:configimage].

\stopitemize

Дозвољени формати слике су pdf, mps, jpg, png, jp2, jbig, jbig2, jb2, svg,
eps, gif или tif. \ConTeXt\ директно може да управља са осам од њих, док
остали (svg, eps, gif или tif) морају да се конвертују спољним алатом пре
отварања, који се мења у зависности од формата, па зато мора бити
инсталиран на систему ако желимо да \ConTeXt\ може манипулисати том врстом
фајлова.

\startSmallPrint

  Међу форматима које подржава \tex{externalfigure} су и неки видео
  формати. Тачније: QuickTime (екстензија .mov), Flash Video (екстензија
  .flv) и MPEG~4 (екстензија .mp4). Али већина PDF прегледача не зна како
  да ради са PDF фајловима који у себи имају уграђени видео. О овоме не
  могу пуно да кажем, јер нисам обавио никакве тестове.

\stopSmallPrint

Нема потребе да се наводи екстензија фајла: \ConTeXt\ ће тражити фајл са
наведеним именом са једном од екстензија познатих формата слике. У случају
да има неколико кандидата, ако постоји, најпре се користи PDF формат, а у
његовом одсуству, MPS формат (графика генерисана са \MetaPostLogo). Ако
нема ова два, редослед је следећи: jpeg, png, jpeg~2000, jbig и jbig2.

\startSmallPrint

  Ако се стварни формат слике не слаже са екстензијом фајла у којем је
  сачувана, \ConTeXt\ не може да је отвори осим ако опцијом {\tt method} не
  наведемо стварни формат слике.

\stopSmallPrint

Ако се слика не постави сама, ван пасуса, већ унутар текста пасуса, а њена
висина је већа од прореда, линија ће се подесити тако да се спречи
преклапање слике са претходним линијама, као у примеру који је дат у овој
линији\externalfigure[cow-brown][width=2.5em].

\ConTeXt\ подразумевано претражује радни директоријум, његов родитељ
директоријум и родитељ тог директоријума. Локацију директоријума који садржи
слике са којима ћемо радити можемо да задамо опцијом {\tt directory}
команде \tex{setupexternalfigures}, која ће задати директоријум додати на
путању за претрагу. Ако желимо да се претрага врши само у директоријуму са
сликама, морамо да поставимо и опцију {\tt location}. Тако на пример, ако
желимо да наш документ тражи све слике у \MyKey{img} директоријуму, требало
би да напишемо:

\starttyping
  \setupexternalfigures
    [directory=img, location=global]
\stoptyping

\startSmallPrint

  У {\tt directory} опцији команде \tex{setupexternalfigures} можемо да
  наведемо више директоријума, раздвајајући их запетама; али у том случају
  директоријуме морамо да поставимо унутар витичастих заграда. На пример
  \MyKey{directory=\{img, \lettertilde/slike\}}.

  У {\tt directory} увек користимо карактер \quote{/} као граничник између
  директоријума; такође и у систему Microsoft Windows, који иначе као
  граничник директоријума користи \quote{\backslash}.

\stopSmallPrint

\tex{externalfigure} може да користи и слике које се налазе на Интернету.
Тако на пример, следећи фрагмент ће у документ уметнути CervanTeX лого
директно са Интернета. То је \TeX\ корисничка група на шпанском
језику:\footnote{Интернет адресе су веома дугачке, па нема довољно места да
се испише у примеру у две колоне. Из тог разлога сам у веб адресу уметнуо
прелом реда како би могла да стане у колону. Ако неко жели да копира и
налепи пример, он неће функционисати док се не обрише овај прелом линије.}

\startDoubleExample
\starttyping
\externalfigure
[http://www.cervantex.es/files/
cervantex/cervanTeXcolor-small.jpg]
\stoptyping

\externalfigure
[http://www.cervantex.es/files/cervantex/cervanTeXcolor-small.jpg]

\stopDoubleExample

\startSmallPrint

  Када се први пут компајлира документ који садржи удаљени фајл, он се
  преузима са сервера и чува у \LuaTeX\ кеш директоријуму. Затим се у
  накнадним компајлирањима документа користи овај кеширани фајл. Удаљена
  слика се обично поново преузима ако је слика старија од 1~дан. Ако желите
  да промените ову границу, погледајте \goto{\ConTeXt\
  вики}[url(https://wiki.contextgarden.net/Using_Graphics)].

\stopSmallPrint

Ако \ConTeXt\ не пронађе слику која треба да се уметне, не генерише се
грешка, већ се уместо слике умеће текст блок величине слике (ако је
\ConTeXt\ зна) или у супротном, стандардне величине. Пример за ово се
налази у \in{одељку}[sec:startcombination].

\stopsubsection

\startsubsection
  [
    reference=sec:placefigure,
    title={Уметање слике са \tex{placefigure}},
  ]
  \PlaceMacro{placefigure}

Слике могу и директно да се уметну. Али је пожељно да се то ради командом
\tex{placefigure}. Ова команда чини да \ConTeXt:

\startitemize

\item зна да слика која се умеће мора бити део листе слика у документу
која, ако желимо, касније може да се употреби за прављење индекса слика.

\item додели број слици, и тако омогући интерно указивање на њу.

\item дода наслов слици, креирајући блок текста између слике и њеног
наслова што значи да се они не могу раздвојити.

\item аутоматски постави празан простор (хоризонтални и вертикални)
потребан да се слика исправно види.

\item постави слику на назначено место, тако да по потреби текст тече око
ње.

\item конвертује слику у плутајући објекат ако је то могуће, узимајући у
обзир спецификацију \Conjecture њене величине и места.\footnote{Ово друго
је мој закључак, узевши у обзир да се међу опцијама постављања налазе и
{\tt force} или {\tt split} које се косе са смислом плутајућих објеката.}

\stopitemize
  
\stopfigure

Синтакса ове команде је следећа:

\type{\placefigure[Опције] [Лабела] {Наслов} {Слика}}

Аргументи имају следеће значење:

\startitemize

\item {\em Опције} су скуп назнака које уопштено наводе где слика треба да
се постави. Пошто су ове опције исте и у овој и у осталим командама, све ћу
их објаснити касније (у \in{одељку}[sec:placingobjects]). За сада,
користићу опцију {\tt here} у примерима. Она систему \ConTeXt\ говори да,
колико је то могуће, постави слику тачно на позицију на којој се налази
команда.

\item {\em Лабела} је текст стринг којим се интерно указује на овај
објекат, тако да можемо правити референце на њега (погледајте
\in{одељак}[sec:references]).

\item {\em Наслов} је текст наслова који се додаје слици.

\item {\em Слика} је команда која умеће слику.

\stopitemize

На пример

\starttyping
  \placefigure
    [here]
    [fig:texknuth]
    {\TeX\ лого и фотографија {\sc Кнута}}
    {\externalfigure[https://i.ytimg.com/vi/8c5Rrfabr9w/maxresdefault.jpg]}
\stoptyping

  \placefigure
    [here]
    [fig:texknuth]
    {\TeX\ лого и фотографија {\sc Кнута}}
    {
      \externalfigure
        [https://i.ytimg.com/vi/8c5Rrfabr9w/maxresdefault.jpg]
        [scale=600]
    }

Као што можемо видети у овом примеру, уметањем слике (које је, иначе
урађено директно са Интернета), долази до неких промена у односу на оно
што се дешава када се команда \tex{externalfigure} користи директно. Додаје
се вертикални простор, слика се центрира и додаје се наслов. То су {\em
спољне} измене, видљиве на први поглед. Са интерне тачке гледишта, команда
је такође произвела не мање важне ефекте:

\startitemize

\item Пре свега, слика је стављена у \quotation{листу слика} објеката
уметнутих у документ, коју \ConTeXt\ интерно одржава. Ово затим значи да ће
се слика појавити у индексу слика који може да се генерише помоћу
\tex{placelist[figure]} (погледајте \in{одељак}[sec:lists]), мада постоје и
две специфичне команде за генерисање индекса слика
\PlaceMacro{placelistoffigures}\tex{placelistoffigures} или
\PlaceMacro{completelistoffigures}\tex{completelistoffigures}.

\item Друго, слика је повезана са лабелом која је наведена као други
аргумент команде \tex{placefigure}, што значи да од сада можемо да наводимо
интерне референце на слику користећи ту лабелу (погледајте
\in{одељак}[sec:references]).

\item Коначно, слика је постала плутајући објекат, што значи да се у
случају словослагачких потреба (пагинације) може померити, \ConTeXt\ ће
изменити њену позицију.

\stopitemize

Уствари, \tex{placefigure} се, упркос свом имену, не користи само за
уметање слика. Помоћу ње можемо да уметнемо било шта, укључујући и текст.
Међутим, текст и остале ствари које се уметну у документ командом
\tex{placefigure}, ће се третирати {\em као да су слика}, чак и ако то
нису; додаће се на листу слика коју \ConTeXt\ интерно одржава и можемо
применити трансформације сличне онима које користимо за слике, као што су
скалирање или ротирање, уоквиравање, итд. Тако се наредни пример:

\placefigure
  [here, force]
  [fig:testtext]
  {Употреба \backslash placefigure за трансформацију текста}
  {\rotate[rotation=180]{\framed{\tfd Тест текст}}}

постиже на следећи начин:

\starttyping
\placefigure
  [here, force]
  [fig:testtext]
  {Употреба \backslash placefigure за трансформацију текста}
  {\rotate[rotation=180]{\framed{\tfd Тест текст}}}
\stoptyping

\stopsubsection

\startsubsection
  [title={Уметање слика интегрисаних у текст блок}]

  Осим за веома мале слике које могу да се интегришу у линију без
  превеликог ометања прореда, слике се обично умећу у пасус који садржи
  само ту слику (или другим речима, слика може да се посматра као посебан
  пасус). Ако се слика уметне са \tex{placefigure} и њена величина то
  дозвољава, у зависности од тога шта смо навели за место на које треба да
  се постави (погледајте \in{одељак}[sec:placingobjects]), \ConTeXt\ ће
  дозволити да текст из претходних и наредних пасуса тече око слике.
  Међутим, ако желимо обезбедити да се одређена слика не одваја од
  одговарајућег текста, можемо да употребимо {\tt
  \PlaceMacro{startfiguretext}figuretext} окружење, чија је синтакса:

\starttyping
  \startfiguretext
    [Опције]
    [Лабела]
    {Наслов}
    {Слика}

    ... Текст

  \stopfiguretext
\stoptyping

Аргументи окружења су потпуно исти као за \tex{placefigure} и имају исто
значење. Али опције овде више нису за постављање плутајућег објекта, већ
назнаке за интеграцију слике у пасус; тако на пример, \MyKey{left} овде
значи да ће се слика поставити лево, док ће текст тећи десно, а
\MyKey{left, bottom} значи да слика мора да се постави на доњу леву страну
текста којем је придружена.

Текст који се напише унутар окружења ће тећи око слике.

\stopsubsection

\startsubsection
  [
    reference=sec:configimage,
    title={Конфигурација и трансформација уметнутих слика},
  ]

\startsubsubsection
  [title={Уметање опција команде које врше неке трансформације слике}]
  \PlaceMacro{setupexternalfigures}

Последњи аргумент команде \tex{externalfigure} нам омогућава да изведемо
одређена подешавања слике која се умеће. Доступне су следеће врсте
подешавања:

\startitemize

\item У општем случају за све слике које се умећу у документ; или за све
слике које се умећу од одређеног места. У овом случају подешавање радимо
командом \tex{setupexternalfigures}.

\item За одређену слику коју желимо да уметнемо неколико пута у документ. У
овом случају подешавање се ради у последњем аргументу
\tex{useexternalfigure} команде који слици придружује симболичко име.

\item У тренутку уметања одређене слике. У овом случају се подешавање врши
самом \tex{externalfigure} командом.

\stopitemize

Измене слике које могу да се постигну на овај начин су:

\startdescription{Промена величине слике.}

Можемо да урадимо следеће:

\startitemize

\item {\em Навођење прецизне ширине или висине}, ради се редом опцијама
{\tt width} и {\tt height}; ако се измени само једна од две вредности, она
друга се аутоматску подешава тако да се одржи пропорција.

  Можемо да доделимо прецизну висину или ширину, или да је наведемо као
  проценат висине или ширине странице. На пример: 

  \type{width=.4\textwidth}

  ће обезбедити да је ширина слике 40\% ширине линије.

\item {\em Скалирање слике}: опција {\tt xscale} ће скалирати слику по
хоризонтали; {\tt yscale} ће то урадити по вертикали, а {\tt scale} ће је
скалирати и по хоризонтали и по вертикали. Ове три опције очекују број који
представља фактор скалирања помножен са 1000. Дакле: {\tt scale=1000} ће
оставити слику у њеној оригиналној величини, док ће је {\tt scale=500}
умањити на половину, а {\tt scale=2000} ће јој дуплирати величину.

  Условно скалирање се примењује само ако слика прелази одређене
  димензије, а добија се опцијама {\tt maxwidth} и {\tt maxheight} које
  прихватају димензију као вредност. На пример {\tt maxwidth=.2\backslash
  textwidth} ће скалирати слику само ако се испостави да је већа од 20\%
  ширине линије.

\stopitemize  

\stopdescription

\startdescription{Ротирање слике.}

  За ротирање слике користимо опцију {\tt orientation}. Она као вредност
  узима број који представља угао у степенима за који ће се слика ротирати.
  Ротација се врши у смеру обрнутом од смера казаљке на сату.

  \startSmallPrint

    Вики наводи да ротације које се раде овом опцијом морају бити умношци
    од 90 степени (90, 180 или 270), а ако је потребно да се добије
    другачија вредност, треба да се употреби команда \tex{rotate}. Међутим,
    нисам имао никаквих проблема да на слику применим ротацију од 45
    степени помоћу {\tt orientation=45}, без потребе да се употреби
    \tex{rotate} команда.

  \stopSmallPrint
  
\stopdescription

\startdescription{Постављање оквира око слике.}

  Око слике такође можемо да поставимо и оквир опцијом {\tt frame=on}, да
  конфигуришемо његову боју са {\tt framecolor}), растојање од оквира до
  слике са {\tt frameoffset}), дебљину линије оквира са {\tt
  rulethickness}) или облик његових углова са {\tt framecorner}) који могу
  бити заобљени {\tt round}) или угласти.

\stopdescription

\startdescription{Остали аспекти слике који могу да се конфигуришу.}

  Уз аспекте које смо већ видели, који се тичу трансформисања слике која
  треба да се уметне, командом \tex{setupexternalfigures} можемо да
  конфигуришемо и остале аспекте, као што је место на коме се тражи слика
  (опција {\tt directory}), да ли би слика требало да се тражи само у
  наведеном директоријуму ({\tt location=local}), или би требало да се у
  претрагу укључе и текући директоријум и његови родитељи ({\tt
  location=global}), као и да ли ће слика бити интерактивна или не ({\tt
  interaction}), итд.
  
\stopdescription

\stopsubsubsection

\startsubsubsection
  [title={Специфичне команде за трансформисање слике}]
 
\ConTeXt\ поседује три команде које врше неке трансформације слике. Оне
могу да се користе у комбинацији са \tex{externalfigure}. То су:

\startitemize
  
\item {\em Осна симетрија по вертикали}: постиже се командом
\PlaceMacro{mirror}\tex{mirror}.

\item {\em Одсецање}: ово се постиже командом \PlaceMacro{clip}\tex{clip}
када се задају ширина ({\tt width}), висина ({\tt height}), хоризонтални
померај ({\tt hoffset}) и вертикални померај ({\tt voffset}). На пример:

\starttyping
\clip
  [width=2cm, height=1cm, hoffset=3mm, voffset=5mm]
  {\externalfigure[logo.pdf]}
\stoptyping

\item {\em Ротација.}
  Трећа команда која на слику може применити трансформацију је
  \PlaceMacro{rotate}\tex{rotate} команда. Може да се користи заједно са
  \tex{externalfigure} али то обично није потребно јер ова друга, као што
  смо видели, има опцију {\tt orientation} која даје исти резултат.

\startSmallPrint

\stopSmallPrint

\stopitemize

Типична употреба ових команди је за слике, али оне уствари раде над {\em
кутијама}. Због тога можемо да их применимо на било који текст, само ако га
поставимо унутар кутије (што сама команда ради аутоматски), па ћемо добити
неке прилично занимљиве ефекте као што су следећи:

\startDoubleExample
\vbox{\starttyping
  \mirror{Тест текст}\\
  \rotate[rotation=20] {Тест текст}
\stoptyping}

\vbox{  \mirror{Тест текст}\\
  \rotate[rotation=20]
     {Тест текст}}

\stopDoubleExample

\stopsubsubsection

\stopsubsection

\stopsection

\startsection
  [
    reference=sec:tables,
    title={Табеле},
  ]

\startsubsection
  [title={Општи концепти о табелама и њиховом постављању у документ}]

Табеле су структурни објекти који садрже текст, формуле, или чак слике
поређане у низове {\em ћелија} које нам омогућавају да графички представимо
везу између садржаја сваке ћелије. Да бисмо то урадили, информације
организујемо у редове и колоне: сви подаци (или ставке) у истом реду су у
одређеној међусобној вези, исто тако и сви подаци (или ставке) у истој
колони. Ћелија је пресек реда и колоне, као што је приказано на
\in{слици}[fig:table].

\placefigure
  [right]
  [fig:table]
  {Слика просте табеле}
  {\externalfigure[tabele_sr][width=.6\textwidth]}
  
Табеле су идеалне за приказ текста или података који су у међусобној вези,
јер пошто је сваки од њих везан за сопствену ћелију, чак и ако се њен
садржај или садржај преосталих ћелија измени, релативна позиција једне
ћелије у односу на остале се неће променити.

Од свих задатака везаних за словослагање текста, креирање табела је, по мом
мишљењу, једноставније урадити у графичком програму (типа текст процесора)
него у систему \ConTeXt. Јер табелу је једноставније {\em нацртати} (а то
је управо оно што ради текст процесор) него {\em описати}, а управо то
радимо када је креирамо у систему \ConTeXt. Свака промена реда и промена
колоне захтева присуство команде, а то значи да имплементација табеле траје
много дуже од простог навођења жељеног броја редова и колона.

\ConTeXt\ поседује три различита механизма за прављење табела; {\tt
tabulate} окружење, које се препоручује за једноставне табеле и које је
најдиректније инспирисано \TeX\ табелама; такозване {\em природне табеле},
инспирисане HTML табелама, погодне за табеле са посебним потребама дизајна
где, на пример, сви редови немају исти број колона; и такозване {\em
екстремне табеле}, јасно базиране на XML и препоручене за табеле средње или
велике дужине које се простиру на више од једне странице. Од ове три, ја ћу
објаснити само прву. Природне табеле су прилично добро објашњене у
\quotation{\ConTeXt\ Mark~IV an excursion}, а о {\em екстремним табелама}
постоји документ у \suite- документацији.

Код табела се дешава нешто слично као са сликама: можемо једноставно да
напишемо потребне команде на неком месту у документу и тако генеришемо
табелу која ће се уметнути тачно на то место, или за уметање табеле можемо
да употребимо команду \PlaceMacro{placetable}\tex{placetable}. Ово има неке
предности:

\startitemize

\item \ConTeXt\ нумерише табелу и додаје је на листу табела чиме се
омогућава интерна референца на табелу (преко њене нумерације), укључујући
је у евентуални индекс табела.

\item Добићемо флексибилност у позиционирању табеле унутар документа, па
тако олакшавамо задатак пагинације.

\stopitemize

Формат команде \tex{placetable} је сличан ономе што смо видели код
\tex{placefigure} (погледајте \in{одељак}[sec:placefigure]):

\type{\placetable[Опције] [Лабела] {Наслов} {табела}}

Указујем на одељке \in{}[sec:placingobjects] и \in{}[sec:confcaptions] у
вези са опцијама које се тичу постављања табеле и конфигурације њеног
наслова.  Међутим, међу опцијама постоји и једна која изгледа да је
дизајнирана само за табеле. То је \MyKey{split} опција, која када се
постави, дозвољава систему \ConTeXt\ да табелу распореди на две или више
страница, па у том случају табела више не може да буде плутајући објекат.

Уопштену конфигурацију табела можемо да поставимо командом
\PlaceMacro{setuptables}\tex{setuptables}. Исто као са сликама, такође је
могуће да се генерише индекс табела командом
\PlaceMacro{placelistoftables}\tex{placelistoftables} или
\PlaceMacro{completelistoftables}\tex{completelistoftables}. У вези овога,
погледајте \in{одељак}[sec:variouslists].

\stopsubsection

\startsubsection
  [title={Просте табеле са {\tt tabulate} окружењем}]
\PlaceMacro{starttabulate}

Најједноставније табеле су оне које се добијају {\em tabulate} окружењем,
чији је формат:

\vbox{\starttyping
  \starttabulate[Распоред колона табеле]
    ... % Садржај табеле
    ...
    ...
  \stoptabulate
\stoptyping}\blank[nowhite]

где аргумент који се поставља у велике заграде описује (кодирано) број
колона који ће имати табела, и (понекад индиректно) наводи њихову ширину.
Кажем да аргумент описује дизајн {\em кодирано}, јер на први поглед изгледа
врло мистериозно: састоји се од низа карактера, од којих сваки има
специјално значење. Објаснићу ово мало по мало и у корацима, јер мислим да
је тај начин лакши за разумевање.

\startSmallPrint

  Ово је типичан случај у којем огроман број аспеката које можемо да
  конфигуришемо значи да је потребно много текста да се све опише. Чини се
  да је ово ђаволски тешко. Уствари, за већину табела које се састављају у
  пракси, довољне су тачке 1 и 2. Остатак представљају додатне могућности
  за које је корисно знати да постоје, али нису од суштинског значаја за
  словослагање табеле.

\stopSmallPrint

\startitemize[n]

\item {\bf Граничник колона:} за границу између колона табеле се користи
карактер \MyKey{\|}. Тако на пример, \MyKey{[\|lT\|rB\|]} описује табелу са
две колоне, од којих једна има карактеристике придружене индикаторима
\MyKey{l} и \MyKey{T} (чије значење ћемо видети врло брзо), а друга колона
има карактеристике придружене индикаторима \MyKey{r} и \MyKey{B}. На
пример, проста табела са три лево поравнате колоне би се описала са
\MyKey{[\|l\|l\|l\|]}.

\item {\bf Одређивање основне природе ћелија у колони:} прва ствар која се
одређује када изграђујемо нашу табелу је да ли желимо да се садржај сваке
ћелије исписује у једном реду, или желимо да се сувише дугачак текст сваке
колоне распореди у две или више линија. У {\tt tabulate} окружењу се на ово
питање не одговара за сваку ћелију посебно, већ се посматра као
карактеристика колона.

  \startitemize[azbuka]

  \item {\em Једнолинијске ћелије:} ако желимо да се садржај ћелија у
  колони, без обзира на дужину, пише у једној линији, морамо задати
  поравнање текста у колони, које може бити лево (\MyKey{l}, од {\em
  left}), десно (\MyKey{r}, од {\em right}) или центрирано (\MyKey{c}, од
  {\em center}).

    \startSmallPrint
      
      У принципу, ове колоне ће бити широке онолико колико је потребно да
      стане садржај најшире ћелије. Али ширину колоне можемо ограничити
      кључем \MyKey{w(Ширина)}. На пример, \MyKey{[\|rw(2cm)\|c\|c\|]}
      описује табелу са три колоне, од којих је прва десно поравната, тачне
      ширине 2 центиметра, а друге две центриране и без ограничења ширине.

      Треба запазити да ограничење ширине у једнолинијским колонама за
      последицу има да се текст једне колоне преклапа са текстом наредне
      колоне. Тако да је мој савет да када су нам потребне колоне фиксне
      ширине увек користимо колоне са вишелинијским ћелијама.

    \stopSmallPrint
    
  \item {\em Ћелије које по потреби могу заузети више од једне линије:}
  кључ \MyKey{p} генерише колоне у којима ће текст у свакој ћелији
  заузимати потребан број линија. Ако једноставно наведемо \MyKey{p},
  ширина колоне ће бити пуна доступна ширина. Али такође је могуће да се
  наведе \MyKey{p(Ширина)}, па ће онда колона бити наведене ширине. Тако
  имамо следеће примере:

\starttyping
\starttabulate[|l|r|p|]
\starttabulate[|l|p(4cm)|]
\starttabulate[|r|p(.6\textwidth)|]
\starttabulate[|p|p|p|]
\stoptyping

Први пример ће креирати табелу са три колоне, прву и другу у једној линији,
редом лево и десно поравнате, а трећа ће заузимати остатак ширине и висине
неопходан да се смести сав садржај. У другом примеру, друга колона ће бити
широка тачно четири центиметра, без обзира шта садржи; али ако садржај не
стаје у тај простор, поставиће се у више линија. Трећи пример израчунава
ширину друге колоне у односу на максималну ширину линије, а у последњем
примеру постоје три колоне које ће међу собом поделити доступну ширину на
једнаке делове.

  \startSmallPrint

    Имајте на уму да је у реалности ћелија четворострана, оно што кључ
    \MyKey{p} ради је да дозвољава променљиву висину ћелија у колони,
    зависно од дужине текста у њима.
    
  \stopSmallPrint
  \stopitemize

\item {\bf Додавање назнака стила и варијанте фонта у опис колоне:} када се
одлучи основна природа колоне (ширина и висина ћелија, аутоматска или
фиксна), у опис садржаја колоне још можемо додати и карактер који поставља
{\em формат} у којем се садржај исписује. Ови карактери могу бити \MyKey{B}
за црни слог, \MyKey{I} за курзив, \MyKey{S} за коси слог, \MyKey{R} за
испис у римском стилу, или \MyKey{T} за испис у стилу {\em писаће машине}.

\starthead {\bf Остали додатни аспекти који могу да се наведу у опису
колона табеле:}\stophead

  \startitemize[1]

  \item {\em Колоне са математичким формулама:} кључеви \MyKey{m} и
  \MyKey{M} укључују математички режим у колони без потребе да се он наводи
  за сваку од ћелија у колони. Ћелије у овој колони неће моћи да садрже
  обичан текст.

    \startSmallPrint

      Мада је \TeX, претходник система \ConTeXt, креиран за словослагање
      било које врсте математике, све до сада нисам рекао скоро ништа о
      писању математике. У математичком режиму (који нећу објашњавати)
      \ConTeXt\ мења уобичајена правила, па чак користи и другачије
      фонтове. Математички режим долази у две варијанте: један можемо
      назвати {\em линеарни} у којем је формула обухваћена линијом која
      садржи нормални текст (кључ \MyKey{m}) и {\em комплетни математички
      режим} који формуле исписује у окружењу у којем нема обичног текста.
      Главна разлика између ова два режима у табели је у основи величина у
      којој ће се исписати формула, као и у хоризонталном и вертикалном
      простору око ње.

    \stopSmallPrint

  \item {\em Додавање додатног хоризонталног празног простора око садржаја
  ћелија у колони:} кључевима \MyKey{in}, \MyKey{jn} и \MyKey{kn} можемо
  додати још празног простора лево од садржаја колоне (\MyKey{in}), десно
  (\MyKey{jn}) или са обе стране (\MyKey{kn}). У сва три случаја, \MyKey{n}
  представља број којим се множи празан простор који и иначе постоји када
  се ови кључеви не наведу (просек је подразумевано један {\em ем}). Тако
  на пример, \MyKey{\|j2r\|} наводи да се креира колона која ће бити десно
  поравната и у којој желимо празан простор ширине 1 {\em ема}.

  \item {\em Додавање текста испред или иза садржаја сваке ћелије у колони.}
  Кључеви {\tt b\{Текст\}} и {\tt a\{Текст\}} наводе да се текст унутар
  витичастих заграда исписује испред (\MyKey{b}, од {\em before}) или иза
  (\MyKey{a}, од {\em after}) садржаја ћелије.

  \item {\em Примењивање комаде форматирања на комплетну колону.} Кључеви
  \MyKey{B}, \MyKey{I}, \MyKey{S}, \MyKey{R} \MyKey{T} које смо већ
  поменули не покривају све могућности форматирања: нпр. нема кључа за
  капитал, или за {\em линеарно писмо}, или онај који утиче на величину
  фонта. Кључем \MyKey{f\backslash Команда} можемо да наведемо комаду
  формата које ће се аутоматски применити на све ћелије у колони. На
  пример, \MyKey{\|lf\backslash sc\|} ће садржај колоне сложити капиталом.

  \item {\em Примењивање било које команде на све ћелије у колони.}
  Коначно, кључ \MyKey{h\backslash Команда} ће применити наведену команду
  на све ћелије у колони.

\stopitemize

\stopitemize

У \in{табели}[tbl:examplestabulate] су приказани примери неких стрингова за
спецификацију форматирања табеле.

\placetable
  [here]
  [tbl:examplestabulate]
  {Неки примери начина за навођење формата колона у {\tt tabulate}}
{\starttabulate[|lT|p(.6\textwidth)|]
\HL
\NC{\bf\rm Спецификатор формата}
\NC{\bf Значење}
\NR
\HL
\NC \|l\|
\NC Генерише колону чија је ширина аутоматски лево поравната.
\NR
\NC \|rB\|
\NC Генерише колону чија је ширина аутоматски десно поравната, црним слогом.
\NR
\NC \|cIm\|
\NC Генерише колону за математички садржај. Центриран, у курзиву.
\NR
\NC \|j4cb\{—\}\|
\NC Садржај ове колоне ће бити центриран, почињаће ем цртом (—) и
додаваће се 2 {\em ема} празног простора на десну страну.
\NR
\NC \|l\|p(.7\tex{textwidth})\|
\NC Генерише две колоне: прва је лево поравната, аутоматске ширине. Друга
заузима 70\% укупне ширине линије.
\NR
\HL
\stoptabulate}

Када се табела дизајнира, потребно је унети њен садржај. Објашњење тог
процеса почињем описом начина попуњавања табеле када имамо линије које
раздвајају редове и колоне:

\startitemize

\item Увек почињемо тако што цртамо хоризонталну линију. У табели се то
ради командом \PlaceMacro{HL}\tex{HL} (од {\em Horizontal Line}).

\item Затим пишемо прву линију: на почетку сваке ћелије морамо назначити да
она почиње, и да је потребно исцртати вертикалну линију. Ово се ради
командом \PlaceMacro{VL}\tex{VL} (од {\em Vertical Line}). Дакле, почињемо
овом командом и пишемо садржај сваке ћелије. Сваки пут када прелазимо на
наредну ћелију, понављамо команду \tex{VL}.

\item На крају реда експлицитно наводимо да почиње нови ред командом
\PlaceMacro{NR}\tex{NR} (од {\em Next Row}). Након ње понављамо \tex{HL} да
исцртамо нову хоризонталну линију.

\item И тако, један по један, пишемо две редове табеле. Када завршимо,
умећемо као додатак \tex{NR} команду у још једну \tex{HL} да затворимо
мрежу доњом хоризонталном линијом.

\stopitemize

Ако не желимо да цртамо мрежу табеле, уклањамо \tex{HL} команде и мењамо
\tex{VL} команде са \PlaceMacro{NC}\tex{NC} (од {\em New Column}).

Није тако тешко када се навикнемо, иако кад погледамо у изворни кôд табеле
тешко можемо стећи идеју како ће она да изгледа. У
\in{табели}[tbl:tablecommands] видимо команде које могу (и морају) да се
користе унутар табеле. Постоје још неке које нисам објаснио, али мислим да
је ово што сам објаснио довољно.

\placetable
  [here, force]
  [tbl:tablecommands]
  {Команде које се користе у табели}
{\starttabulate[|l|p(.6\textwidth)|]
\HL
\NC {\bf Команда}
\NC {\bf Значење}
\NR
\HL
\NC \tex{HL}
\NC Умеће хоризонталну линију
\NR
\NC \tex{NC}
\NC Започиње нову колону
\NR
\NC \tex{NR}
\NC Започиње нови ред
\NR
\NC \tex{VL}
\NC Умеће вертикалну линију која одваја колону (користи се уместо \tex{NC})
\NR
\NC \PlaceMacro{NN}\tex{NN}
\NC Започиње нову колону у математичком режиму (користи се уместо \tex{NC})
\NR
\NC \PlaceMacro{TB}\tex{TB}
\NC Умеће додатни вертикални простор између два реда
\NR
\NC \PlaceMacro{NB}\tex{NB}
\NC Назначава да наредни ред започиње недељиви блок унутар којег не сме да
се нађе прелом странице
\NR
\HL
\stoptabulate}

А сада ћу, као пример, написати кôд који генерише \in{табелу}[tbl:tablecommands].

\starttyping
\placetable
  [here, force]
  [tbl:tablecommands]
  {Команде које се користе у табели}
{\starttabulate[|l|p(.6\textwidth)|]
\HL
\NC {\bf Команда}
\NC {\bf Значење}
\NR
\HL
\NC \tex{HL}
\NC Умеће хоризонталну линију
\NR
\NC \tex{NC}
\NC Започиње нову колону
\NR
\NC \tex{NR}
\NC Започиње нови ред
\NR
\NC \tex{VL}
\NC Умеће вертикалну линију која одваја колону (користи се уместо \tex{NC})
\NR
\NC \tex{NN}
\NC Започиње нову колону у математичком режиму (користи се уместо \tex{NC})
\NR
\NC \tex{TB}
\NC Умеће додатни вертикални простор између два реда
\NR
\NC \tex{NB}
\NC Назначава да наредни ред започиње недељиви блок унутар којег не сме да се нађе прелом странице
\NR
\HL
\stoptabulate}
\stoptyping

Читалац ће приметити да сам у општем случају користио једну (или две)
линије текста за сваку ћелију. У стварном изворном фајлу би користио само
једну линију текста за сваку ћелију; у примеру сам поделио сувише дугачке
линије. Лакше ми је да пишем табелу једну линију по ћелији, јер уствари
пишем садржај сваке ћелије, без команди за поделу колона или редова. Када
се све напише, изаберем текст табеле и затражим од мог текст едитора да
уметне \quotation{\tex{NC }} на почетак сваке линије. Након тога, после
сваке две линије (јер табела има две колоне) умећем линију која додаје
\tex{NR} команду, јер после сваке две колоне почиње нови ред. Коначно,
ручно умећем \tex{HL} команде на местима на којима желим да се види
хоризонтална линија. Скоро да ми је потребно више времена да ово опишем,
него да га изведем!

Али запазите да унутар табеле можемо користити и уобичајене \ConTeXt\
команде. У овој табели константно користимо \tex{tex} која је објашњена у
\in{одељку}[sec:verbatim].

\stopsubsection

\stopsection

\startsection
  [title={Заједнички аспекти слика, табела и\\ осталих плутајућих објеката},
  bookmark={Заједнички аспекти слика, табела и осталих плутајућих објеката}]

Већ знамо да слике и табеле не морају бити плутајући објекти, али су добри
кандидати да то буду, мада онда у документ морају да се уметну командом
\tex{placefigure} или \tex{placetable}. Уз ове две команде, и уз исту
структуру, у систему \ConTeXt\ имамо и
\PlaceMacro{placechemical}\tex{placechemical} команду (за уметање хемијских
формула), команду \PlaceMacro{placegraphic}\tex{placegraphic} (за уметање
графика) и команду \PlaceMacro{placeintermezzo}\tex{placeintermezzo} за
уметање структуре коју \ConTeXt\ назива {\em Интермецо}, која претпостављам
да се односи на уоквирене фрагменте текста. Све ове команде су уствари
примене општије команде \PlaceMacro{placefloat}\tex{placefloat} чија је
синтакса:

\type{\placefloat [Име] [Опције] [Лабела] {Наслов} {Садржај}}

Запазите да је \tex{placefloat} идентична са \tex{placefigure} и
\tex{placetable} осим што први аргумент у \tex{placefloat} представља име
плутајућег објекта. То је зато што {\em сваки тип плутајућег објекта може
да се уметне у документ помоћу две различите команде:}
\tex{placefloat[ИмеТипа]} или \tex{placeИмеТипа}. Другим речима:
\tex{placefloat[figure]} и \tex{placefigure} су потпуно иста команда, као
што је \tex{placefloat[table]} исто што и \tex{placetable}.

Зато ћу од сада да говорим о \tex{placefloat}, али имајте на уму да се све
што кажем такође односи и на \tex{placefigure} или \tex{placetable}, јер су
то специфичне примене наведене команде.

Аргументи команде \tex{placefloat} су следећи:

\startitemize

\item {\em Име.} Односи се на дати плутајући објекат. Може бити неки
предодређени плутајући објекат ({\tt figure, table, chemical, intermezzo})
или плутајући објекат који сами генеришемо командом \tex{definefloat}
(погледајте \in{одељак}[sec:definefloat]).

\item {\em Опције.} Низ симболичких речи које систему \ConTeXt\ говоре како
би требало да уметне објекат. Велика већина њих се односи на {\em место}
уметања. То ћемо видети у наредном одељку.

\item {\em Лабела.} Лабела за будућа интерна указивања на овај објекат.

\item {\em Наслов.} Текст наслова који треба да се дода објекту. Што се
тиче његове конфигурације, погледајте \in{одељак}[sec:confcaptions].

\item {\em Садржај.} Ово наравно зависи од врсте објекта. За слике је
обично команда \tex{externalimage}; за табеле, команде које ће креирати
табелу; за {\em интермеца}, уоквирени фрагмент текста; итд.

\stopitemize

Прва три аргумента која се наводе унутар великих заграда нису обавезна.
Последња два (унутар витичастих заграда) су обавезна, мада могу бити
празни. Тако ће, на пример:
\cmd{placefloat\{\}\{\}} да уметне у документ

\placefloat{}{}

\startitemize

  {\bf Напомена:} видимо да је \ConTeXt\ претпоставио да је уметнути
  објекат слика, јер га је нумерисао као слику и поставио на листу
  \Conjecture слика. Због тога претпостављам да су слике подразумевано
  плутајући објекти.

\stopitemize

\startsubsection
  [
    reference=sec:placingobjects,
    title={Опције за уметање плутајућих објеката},
  ]

Аргумент {\em Опције} у \tex{placefigure}, \tex{placetable} и
\tex{placefloat} контролише различите аспекте који се тичу уметања ових
типова објеката. Углавном место на страници на које ће се објекат
поставити. Ево неколико подржаних вредности, свака различите природе:

\startitemize

\item Нека места за уметање се успостављају релативно у односу на елементе
странице ({\tt top, bottom inleft, inright, inmargin, margin, leftmargin,
rightmargin, leftedge, rightedge, innermargin, inneredge, outeredge, inner,
outer}). То наравно мора бити објекат који може да стане у простор који му
намењујемо и у распореду странице мора бити резервисан простор за тај
елемент. Што се тиче овога, погледајте одељке \in{}[sec:page-elements] и
\in{}[sec:pagelayout].

\item Остала могућа места за уметање се више тичу текста који се налази око
објекта, и представљају назнаку места на које би требало поставити објекат
тако да текст тече око њега. У основи, то су вредности {\tt left} и {\tt
right}.

\item Опција {\tt here} се интерпретира као препорука да се објекат задржи
на месту на којем је наведен у изворном фајлу. Ова {\em препорука} се неће
поштовати ако то не дозвољавају потребе пагинације. Ова ставка се форсира
ако додамо и опцију {\tt force} која значи управо то: форсирано уметање
објекта на одређено место. Имајте на уму да форсирањем уметања објекта на
одређено место, он престаје да буде плутајући објекат.

\item Остале могуће опције су у вези са страницом на коју објекат треба да
се уметне: \MyKey{page} умеће на нову страницу; \MyKey{opposite} умеће на
страницу супротну од текуће; \MyKey{leftpage} на парну страницу;
\MyKey{rightpage} на непарну.
  
\stopitemize

Постоје неке опције које нису у вези са локацијом објекта. То су између
осталих:

\startitemize

\item {\tt none}: ова опција уклања наслов.

\item {\tt split}: ова опција дозвољава да се објекат простире на више од
једне странице. Наравно, то мора бити природно дељив објекат, као што је
табела. Када се ова опција употреби и објекат се подели, више се не може
рећи да је он плутајући.

\stopitemize

\stopsubsection

\startsubsection
  [
    reference=sec:confcaptions,
    title={Конфигурисање наслова плутајућег објекта},
  ]

Осим ако у \tex{placefloat} не употребимо опцију \MyKey{none}, плутајућим
објектима се подразумевано додељује наслов који се састоји из три елемента:

\startitemize

\item Име врсте објекта о којем је реч. Ово име је потпуно исто као назив
типа објекта; тако да ако, на пример, дефинишемо нови плутајући објекат под
називом \quotation{sekvenca} па уметнемо \quotation{sekvenca} као плутајући
објекат, наслов ће бити \quotation{Sekvenca 1}. Једноставно се име објекта
испише првим великим словом.

  \startSmallPrint

    Упркос овоме што сам управо рекао, ако главни језик документа није
    енглески, енглеска имена предефинисаних објеката, као на пример
    \MyKey{figure} или \MyKey{table} ће бити преведени; тако се на пример,
    \MyKey{figure} објекат у документима на српском назива \MyKey{Слика},
    док се \MyKey{table} објекат назива \MyKey{Табела}. Ова предефинисана
    српска имена могу да се промене командом \tex{setuplabeltext} онако
    како је објашњено у \in{одељку}[sec:labels].
    
  \stopSmallPrint

\item Његов број. Објекти се подразумевано нумеришу по поглављима, тако да
је прва табела у глави 3 табела \quote{3.1}.

\item Њен садржај. Уводи се као аргумент команде \tex{placefloat}.

\stopitemize

Помоћу \PlaceMacro{setupcaptions}\tex{setupcaptions} или
\PlaceMacro{setupcaption}\tex{setupcaption[Објекат]} можемо да изменимо
систем нумерисања и изглед самог наслова. Прва команда ће утицати на све
наслове свих објеката, а друга само на наслов одређене врсте објекта:

\startitemize

\item Што се тиче система нумерисања, он се контролише опцијама {\tt
number}, {\tt way}, {\tt prefixsegments} и {\tt numberconversion}:

  \startitemize

  \item {\tt number} може имати вредност {\tt yes}, {\tt no} или
    {\tt none} и контролише да ли ће постојати број или неће.

  \item {\tt way} наводи да ли ће нумерација бити редом кроз цео документ
  ({\tt way=bytext}), или ће поново кренути из почетка када се промени
  поглавље ({\tt way=bychapter}) или одељак ({\tt way=bysection}).  У
  случају поновног почетка, згодно је да се вредност ове опције усклади са
  опцијом {\tt prefixsegments}.

  \item {\tt prefixsegments} наводи да ли ће број имати {\em
    префикс}, и шта ће он бити. Тако да {\tt prefixsegments=chapter} као
    резултат има бројеви објеката увек почињу са бројем поглавља, док ће
    {\tt prefixsegments=section} да испред број објекта постави број
    одељка. 

  \item {\tt numberconversion} контролише врсту нумерације. Вредности ове
  опције могу бити: арапски бројеви
    (\MyKey{numbers}), мала слова (\MyKey{a},
    \MyKey{characters}), велика слова (\MyKey{A},
    \MyKey{Characters}), капитал \MyKey{KA}), римски бројеви исписани
    великим словима (\MyKey{I}, \MyKey{R},
    \MyKey{Romannumerals}), малим словима (\MyKey{i},
    \MyKey{r}, \MyKey{romannumerals} или капиталом
    (\MyKey{KR})).

  \stopitemize

\item Изглед самог наслова контролишу бројне опције. Ја ћу их овде
навести, али за детаљно објашњење значења сваке од њих, упућујем на
\in{одељак}[sec:titlestyle] у којем је објашњена контрола изгледа команди
за поделу, јер су опције углавном исте. То су:

  \startitemize

  \item За контролу формата свих елемената наслова {\tt style, color,
    command}.

  \item Само за контролу формата врсте објеката према имену: {\tt
    headstyle, headcolor, headcommand, headseparator}.

  \item Само за контролу формата нумерисања: {\tt
    numbercommand}.

  \item Само за контролу формата самог наслова:
    {\tt textcommand}.

  \stopitemize

\item Такође можемо да контролишемо и остале аспекте као што су растојање
између појединих елемената који чине наслов, ширину наслова, позиционирање
наслова у односу на објекат, итд. Овде упућујем на информације из
\goto{\ConTeXt\ викија}[url(wiki)] у вези са опцијама које конфигуришу ову
команду.

\stopitemize

\stopsubsection

\startsubsection
  [
    reference=sec:startcombination,
    title={Комбиновано уметање два или више објеката},
  ]

Ако у документ желимо да уметнемо два или више различитих објеката, тако да
их \ConTeXt\ држи заједно као један објекат, на располагању нам је
\PlaceMacro{startcombination}\tex{startcombination} окружење, чија је
синтакса:

\type{\startcombination[Редослед] ... \stopcombination}

где {\em Редослед} назначава како би објекти требало да се распореде: ако
сви треба да се поређају хоризонтално, {\em Редослед} само означава број
објеката који се комбинују. Али ако желимо да их комбинујемо у два или више
редова, морамо да назначимо колико објеката по реду, па затим у колико
редова, раздвајајући то карактером *. На пример:

\starttyping
\startcombination[3*2]
  {\externalfigure[test1]}
  {\externalfigure[test2]}
  {\externalfigure[test3]}
  {\externalfigure[test4]}
  {\externalfigure[test5]}
  {\externalfigure[test6]}
\stopcombination
\stoptyping

ће направити следећи распоред слика:

\dontleavehmode\startcombination[3*2]
  {\externalfigure[test1]}
  {\externalfigure[test2]}
  {\externalfigure[test3]}
  {\externalfigure[test4]}
  {\externalfigure[test5]}
  {\externalfigure[test6]}
\stopcombination

У претходном примеру слике које сам комбиновао не постоје, па је то разлог
што је \ConTeXt\ уместо слика генерисао текст кутије са информацијама о
сликама.

С друге стране, запазите да је сваки елемент који треба да се комбинује
унутар \tex{startcombination}, унутар витичастих заграда.

Иначе, \tex{startcombination} нам дозвољава не само да спојимо и поравнамо
слике, већ било коју врсту {\em кутије} као што су текстови унутар
{startframedtext} окружења, табеле, итд. За конфигурисање комбинације
можемо употребити команду \tex{setupcombination}, а командом
\PlaceMacro{definecombination}\tex{definecombination} такође можемо да
креирамо и преконфигурисане комбинације.

\stopsubsection

\startsubsection
  [title={Општа конфигурација плутајућих објеката}]

Већ смо видели да командом \tex{placefloat} можемо контролисати место
уметања плутајућег објекта, као и још неке детаље. Такође се могу
конфигурисати и:

\startitemize

\item Глобалне карактеристике одређеног типа плутајућих објеката. Ово се
ради командом \PlaceMacro{setupfloat}\cmd{setupfloat[Име типа плутајућег
објекта]}.

\item Глобалне карактеристике свих плутајућих објеката у нашем документу.
Ово се ради командом \PlaceMacro{setupfloats}\tex{setupfloats}.  

\stopitemize

Имајте на уму да исто као што је \tex{placefloat[figure]} еквивалентно са
\tex{placefigure}, тако је и \tex{setupfloat[figure]} еквивалентно са
\tex{setupfigures}, а \tex{setupfloat[table]} са \tex{setuptables}.

Што се тиче опција које су доступне за конфигурисање ових команду, указујем
на \ConTeXt\ званичну листу команду (\in{одељак}[sec:qrc-setup-en]).

\stopsubsection

\startsection
  [
    reference=sec:definefloat,
    title={Дефинисање додатних плутајућих објеката},
  ]
  \PlaceMacro{definefloat}

Команда \tex{definefloat} нам омогућава да дефинишемо наш сопствени
пливајући објекат. Њена синтакса је:

\type{\definefloat [Име у једнини] [Име у множини] [Конфигурација]}

где {\em Конфигурација} није обавезан аргумент који нам омогућава да већ у
време креирања овог новог објекта наведемо и његову конфигурацију. То
такође можемо и касније да урадимо командом \tex{setupfloat[Име у једнини]}.

Пошто овим одељком завршавамо наш увод, искористићу прилику да мало
детаљније зађем у привидну {\em џунглу} \ConTeXt\ команди, које једном када
се разумеју, и нису баш тако густа {\em џунгла}, већ су у суштини прилично
разумне.

Хајде да почнемо тако што ћемо себе упитати шта плутајући објекат заиста
представља за систем \ConTeXt. Одговор је да је то објекат са следећим
карактеристикама:

\startitemize

\item Поседује одређени степен слободе што се тиче његовог места на
страници.

\item Има придружену {\em листу}. Она омогућава да се ова врста објеката
нумерише, па да се по потреби генерише индекс ових објеката.

\item Има наслов

\item Када објекат заиста може да плута, мора да се третира као недељива
јединица, што значи (у \TeX\ терминологији) {\em унутар кутије}.

\stopitemize

Другим речима, плутајући објекат је уствари састављен од три елемента:
самог објекта, придружене листе и наслова. За контролу самог објекта нам је
потребна само једна команда којом постављамо његову локацију и још једна
којом објекат умећемо у документ; за постављање аспеката листе, довољне су
уопштене команде за контролу листи, а за постављање аспеката наслова опште
команде за контролу наслова.

И овде долазимо до места на којем се истиче генијалност система \ConTeXt:
било би довољно да је дизајнирана једноставна команда за контролу
плутајућих објеката (\tex{setupfloats}) и једноставна команда за уметање
плутајућих објеката: \tex{placefloat}: али \ConTeXt\ ради следеће:

\startitemize[n]

\item Дизајнира команду која одређеној конфигурацији плутајућег објекта
додељује име. То је команда \tex{definefloat}, која уствари не повезује
само једно име, већ једно у једнини и једно у множини.

\item Креира, заједно са глобалном конфигурационом командом за плутајуће
објекте, и команду која нам омогућава да конфигуришемо само одређени тип
објекта: \tex{setupfloat[Објекат]}.

\item Команди за постављање плутајућег објекта, (\tex{placefloat}), додаје
аргумент који нам омогућава да направимо разлику између типова:
(\tex{placefloat[Објекат]}).

\item Креира команде, укључујући и име објекта, за све акције над
плутајућим објектом. Неке од ових команди (које су уствари клонови
уопштенијих команди) ће користити име објекта у једнини, а неке у множини.
  
\stopitemize

Дакле, када креирамо нови плутајући објекат и систему \ConTeXt\ кажемо које
је његово име у једнини и множини, \ConTeXt:

\startitemize

\item Резервише у меморији простор за чување одређене конфигурације тог
типа објекта.

\item Креира нову листу са именом типа објекта у једнини, јер се плутајући
објектима придружује листа.

\item Креира нову врсту \quotation{title} везаног за овај нови тип објекта,
како би могла да се одржава прилагођена конфигурација ових наслова.

\item И коначно, креира групу команди које су специфичне за овај нови тип
објекта. Њихова имена су уствари синоними уопштенијих команди.
  
\stopitemize

У \in{табели}[tbl:floatcommands] можемо да видимо команде које се
аутоматски креирају када дефинишемо нови тип плутајућег објекта, као и
уопштеније команде чији су то синоними:

\placetable
  [here]
  [tbl:floatcommands]
  {Команде које се аутоматски креирају када се креира нови плутајући објекат}
{\switchtobodyfont[small]
\starttabulate[|lT|lT|lT|]
\HL
\NC{\bf\rm Команда}
\NC{\bf\rm Синоним за}
\NC{\bf\rm Пример}
\NR
\HL
\NC\backslash completelistof<ИмеУМножини>
\NC\backslash completelist[ИмеУМножини]
\NC\backslash completelistoffigures
\NR
\NC\backslash place<ИмеУЈеднини>
\NC\backslash placefloat[ИмеУЈеднини]
\NC\backslash placefigure
\NR
\NC\backslash placelistof<ИмеУМножини>
\NC\backslash placelist[ИмеУМножини]
\NC\backslash placelistoffigures
\NR
\NC\backslash setup<ИмеУМножини>
\NC\backslash setupfloat[ИмеУМножини]
\NC\backslash setupfigure
\NR
\HL
\stoptabulate
}

\startSmallPrint

  Уствари, креирају се још неке команде које су синоними ових претходних и
  пошто их ја нисам објаснио у овом поглављу, нисам их поставио ни у
  \in{табелу}[tbl:floatcommands]: \tex{start<ИмеУЈеднини>},
  \tex{start<ИмеУЈеднини>text} and  \tex{startplace<ИмеУЈеднини>}.

\stopSmallPrint

Као пример команди које се креирају када се дефинише нови плутајући објекат
сам употребио команду за слике; то сам урадио јер су слике, као и табеле и
остали предефинисани плутајући објекти у систему \ConTeXt, конкретни
случајеви команде \tex{definefloat}:

\starttyping
\definefloat[chemical][chemicals]
\definefloat[figure][figures]
\definefloat[table][tables]
\definefloat[intermezzo][intermezzi]
\definefloat[graphic][graphics]
\stoptyping

Коначно, оно што видимо је да у ствари \ConTeXt\ ни на који начин не
контролише материјал који је део сваког одређеног плутајућег објекта; он
претпоставља да је то посао аутора. Из тог разлога командом
\tex{placefigure} или \tex{placetable} такође можемо да уметнемо и текст.
Међутим, текст који се уметно командом \tex{placefigure} постаје део листе
слика, а ако се уметне са \tex{placetable}, листе табела.

\stopsection

\stopchapter

\stopcomponent

%%% Local Variables:
%%% mode: ConTeXt
%%% mode: auto-fill
%%% coding: utf-8-unix
%%% TeX-master: "../introCTX.mkiv"
%%% End:
%%% vim:set filetype=context tw=75 : %%%
