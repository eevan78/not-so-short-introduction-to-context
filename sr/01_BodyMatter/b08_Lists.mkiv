%%% Фајл:     b08_Lists.mkiv
%%% Аутор:    Joaquín Ataz-López
%%% Започето: Јул 2020
%%% Завршено: Јул 2020
%%% Садржај:  У почетку је ово поглавље било део поглавља 12 (елементи
%%%	      и структуре докумената). Али сам уочио да, с једне стране,
%%%	      индекси утичу на документ глобално, а са друге стране, ако
%%%	      ово поставим као део поглавља 12, он ће постати
%%%	      предугачак. Поглавље је написано у рекордном року (три или
%%%	      четири дана), што је био знак да полако овладавам дубљим
%%%	      разумевањем система ConTeXt.
%%% 
%%% Уређивано са: Emacs + AuTeX - и повремено са vim + context-plugin
%%%

% \environment ../introCTX_env.mkiv

\startcomponent b08_Lists.mkiv

\startchapter
  [
    reference=cap:toc,
    title={Садржаји, индекси, листе},
    bookmark={Садржаји, индекси, листе},
  ]

\TocChap

Садржај и индекс представљају глобални аспект документа. Сви документи
ће поседовати садржај, док ће само неки имати индекс. На многим језицима
(али не и у српском) и садржај и индекс потпадају под општи појам
\quote{индекс}. За енглеске читаоце, садржај обично долази на почетку
(документа, или у неким случајевима, и на почецима поглавља), а индекс
долази на крају.

И једно и друго претпостављају одређену употребу механизма интерних
референци чије објашњење је дато у \in{одељку}[sec:references].

\startsection
  [
    reference=sec:content,
    title=Садржај,
  ]

\startsubsection
  [title=Општи преглед садржаја]

У претходном поглављу смо испитивали команде које омогућавају да се
током писања успоставља структура документа. Овај одељак се бави
садржајем и индексом, који на неки начин {\em одражавају} структуру
документа. Садржај је веома користан за схватање документа као целине
(јер помаже да се информација стави у контекст) и за проналажење тачног
места на којем би могао да се налази одређени пасаж. Чини се да књиге
веома сложене структуре, са много одељака и пододељака разних нивоа
дубине, захтевају различиту врсту садржаја, јер је онај са мало детаља
(можда само са прва два или три нивоа поделе) помаже да се стекне општа
слика садржаја документа, али није баш користан за проналажење одређеног
пасажа; док се у веома детаљном садржају, у којем је лако да се од
дрвета не види шума, губи општи поглед на документ. То је разлог што
књиге са заиста сложеном структуром понекада имају више од једног
садржаја: на почетку један не толико детаљан, који приказује главне
делове, и садржај са више детаља на почетку сваког поглавља, а можда и
индекс на крају књиге. 

У систему \ConTeXt\ релативно лако можемо аутоматски да их генеришемо.
Можемо да:

\startitemize

  \item Генеришемо комплетан или делимични садржај на било ком месту у
  документу.

  \item Одлучимо шта ће сваки да садржи.

  \item Конфигуришемо њихов изглед, све до најситнијих детаља.

  \item У садржај уметнемо хиперлинкове који нам омогућавају да скочимо
  директно на жељени одељак.

\stopitemize

У суштини је ова последња могућност подразумевано активирана у свим
садржајима, ако је за документ укључена функција интерактивности. Што се
тога тиче, погледајте \in{одељак}[sec:interactivity].

Објашњење овога у \ConTeXt\ референтном упутству је, по мом мишљењу,
донекле нејасно услед чињенице да се одједном уводи превише информација.
\ConTeXt\ механизам за изградњу садржаја чине многи делови; па је тешко
да текст који све њих одједном покушава да објасни буде јасан.  Посебно
читаоцу који се тек упознаје са системом.  За разлику од тога, објашњење
у
\goto{викију}[url(https://wiki.contextgarden.net/Table_of_Contents#Page_numbering_in_ToC)],
је практично ограничено на примере: веома је корисно за учење {\em
трикова} али није адекватно – барем ја тако мислим – за разумевање
механизма и начина на који он функционише.  Из тог разлога сам у овом
уводу одлучио да употребим стратегију објашњавања по којој се почиње
претпостављајући нешто што није у потпуности тачно (или није пуна
истина): да у систему \ConTeXt\ постоји нешто што се назива {\em
садржај}. Почевши овако, објашњавају се {\em обичне} команде за
генерисање садржаја, па када се ове команде и њихова конфигурација добро
упознају, сматрам да је тренутак за увођење – мада више на теоретском
него на практичном нивоу – информације о оним деловима механизма који су
до тада били изостављени.  Познавање тих додатних {\em делова} нам
омогућава да креирамо прилагођеније садржаје него што су то они које
називамо {\em обични}, креирани командама које су објашњене до тог
места; међутим, у већини случајева неће бити потребно да то радимо.

\stopsubsection

\startsubsection
  [
    reference=sec:completecontent,
    title=Потпуно аутоматски садржај са насловом,
  ]

Основне команде за аутоматско генерисање садржаја од нумерисаних одељака
документа ({\tt делова}, {\tt поглавља}, {\tt одељака}, итд.) су
\PlaceMacro{completecontent}\tex{completecontent} и
\PlaceMacro{placecontent}\tex{placecontent}. Основна разлика између ове
две команде је што прва у садржај умеће {\em наслов}; да би се то
урадило, она непосредно испред садржаја умеће {\em ненумерисано
поглавље} чији је подразумевани наслов Садржај.

Дакле, \tex{completecontent}:

\startitemize

  \item Умеће, на место на којем се нађе, ненумерисано поглавље под
  називом \quotation{Садржај}.

  \startSmallPrint

    Присетимо се да је у систему \ConTeXt\ команда за генерисање
    ненумерисане поделе која је на истом нивоу као поглавља \tex{title}
    (погледајте \in{одељак}[sec:sectiontypes]). Стога у стварности
    \tex{completecontent} не умеће {\em поглавље} (\tex{chapter}) већ
    {\em наслов} (\tex{title}). Нисам то овако рекао јер мислим да
    читаоца овде може да збуни употреба имена команди ненумерисаних
    подела, пошто појам {\em наслов} такође има и шири смисао, па је
    лако да га читалац не поистовети са конкретним нивоом поделе на који
    се овде односи.

  \stopSmallPrint

  \item Ово {\em поглавље} (уствари, \tex{title}) се форматира потпуно
  исто као и остатак ненумерисаних поглавља у документу; а која
  подразумевано укључују и прелом странице.

  \item Садржај се штампа непосредно након наслова.

\stopitemize

У почетку је генерисани садржај {\em комплетан}, што можемо закључити из
имена команде која га генерише (\tex{completecontent}). Али с једне
стране, ми можемо да ограничимо дубину садржаја, као што је објашњено у
\in{одељку}[sec:placecontent], а с друге, пошто је ова команда {\em
осетљива} на место у изворном фајлу на којем се пронађе (погледајте шта
сам рекао у вези са \tex{placecontent}), ако се \tex{completecontent} не
пронађе на почетку документа, могуће је да генерисани садржај неће бити
комплетан; а на неким местима у изворном фајлу је чак могуће и да се
команда привидно игнорише. Ако се то догоди, решење је да се команда
позове са опцијом \MyKey{criterium=all}.  Што се тиче ове опције,
погледајте такође \in{одељак}[sec:placecontent].

Да бисмо променили подразумевани наслов који се додељује садржају,
користимо команду
\PlaceMacro{setupheadtext}\tex{setupheadtext} чија је синтакса:

  \type{\setupheadtext[Језик][Елемент=Име]}

где {\em Језик} није обавезно и односи се на идентификатор језика који
користи \ConTeXt\ (погледајте \in{одељак}[sec:langdoc]), а {\em Елемент}
се односи на елемент чије име желимо да променимо (\MyKey{content} у
случају садржаја) и {\em Име} представља име или наслов који желимо да
дамо нашем садржају. На пример

  \type{\setupheadtext[en][content=Contents]}

ће обезбедити да се садржај генерисан командом \tex{completecontent}
зове \quotation{Contents} уместо \quotation{Table of Contents}.

Чак штавише, \tex{completecontent} омогућава све конфигурационе опције
као и \tex{placecontent}, за чије објашњење треба да погледате (следећи
одељак).

\stopsubsection

\startsubsection
  [
    reference=sec:placecontent,
    title=Аутоматски садржај без наслова,
  ]

Општа команда за уметање садржаја без наслова, који се аутоматски
генерише из команди поделе документа је 
\tex{placecontent} и њена синтакса је:

\type{\placecontent [Опције]}

У суштини, садржаји ће да обухвате апсолутно све нумерисане одељке, мада
командом \PlaceMacro{setupcombinedlist}\tex{setupcombinedlist} можемо да
ограничимо дубину нивоа који ће обухватити (о овој команди ћемо говорити
касније).  Тако ће, на пример:

\type{\setupcombinedlist[content][list={chapter,section}]}

да ограничи састав садржаја на поглавља и одељке.

Особеност ове команде је да је осетљива на место у изворном фајлу на
којем се налази. Ово је веома једноставно да се објасни на неколико
примера, али је много компликованије ако желимо да наведемо како тачно
команда ради и који наслови се укључују у садржај у сваком случају. Па
хајде да почнемо са примерима:

\startitemize

  \item \tex{placecontent} постављено на почетку документа, пре прве
  команде поделе (part, chapter или section, у зависности од ситуације)
  ће да генерише комплетан садржај.

  \startSmallPrint

    Нисам потпуно сигуран да је садржај који се подразумевано генерише
    {\em комплетан}, мада верујем да се у њега укључује довољно нивоа
    поделе тако да је у већини случајева комплетан; али сумњам да неће
    ићи иза осмог нивоа поделе. У сваком случају, као што је поменуто
    изнад, ниво поделе који улази у садржај можемо да подесимо помоћу

    \type{\setupcombinedlist[content][list={chapter, section, subsection, ...}]}

  \stopSmallPrint

  \item За разлику од тога, иста ова команда постављена унутар дела,
  поглавља или одељка ће генерисати садржај у којем се налази само оно
  што је део тог елемента, или другим речима, поглавља, одељке и остале
  ниже нивое поделе тог одређеног дела, или одељке (и остале нивое)
  одређеног поглавља, или пододељке одређеног одељка.

\stopitemize

Што се тиче техничког и детаљног објашњења, да би се исправно разумело
подразумевано функционисање команде \tex{placecontent}, од суштинске
важности је присетити се да су за \ConTeXt\ Mark~IV различите поделе у
суштини {\em окружења} која почињу са \tex{startТипПоделе}, а које се
завршавају са \tex{stopТипПоделе} и да у њима могу да се налазе остале
команде поделе нижег нивоа.  Па када се то узме у обзир, можемо рећи да
\tex{placecontent} подразумевано генерише садржај који ће само да
обухвати:

\startitemize

  \item Елементе који припадају {\em окружењу} (нивоу поделе) у који се
  постави команда. Ово значи да када се команда постави у поглавље,
  садржај неће обухватити одељке или пододељке осталих поглавља.

  \item Елементе који имају ниво поделе нижи од нивоа који одговара
  тачки на којој се налази команда. Ово значи да ако се команда нађе у
  поглављу, део садржаја постају само одељци, пододељци и остали нижи
  нивои; али ако је команда у одељку, он ће се поделити тако да се
  направи садржај нивоа пододељка.

\stopitemize

Уз то, да би се генерисао садржај, потребно је да се \tex{placecontent}
пронађе {\em пре} првог одељка поглавља у којем се налази, или пре првог
пододељка одељка у којем се налази, итд.

\startSmallPrint

  Нисам сигуран да сам пружио јасно објашњење изнад. Можда уз донекле
  детаљнији пример од претходног можемо боље разумети на шта мислим:
  хајде да замислимо следећу структуру документа:

\vbox{ \startitemize[packed]

  \item Поглавље 1

    \startitemize[packed]

    \item Одељак 1.1

    \item Одељак 1.2

      \startitemize[packed]

      \item Пододељак 1.2.1

      \item Пододељак 1.2.2

      \item Пододељак 1.2.3

      \stopitemize

    \item Одељак 1.3

    \item Одељак 1.4

    \stopitemize

  \item Поглавље 2

  \stopitemize}\blank[nowhite]

  Дакле: када се \tex{placecontent} постави испред Поглавља 1,
  генерисаће комплетан садржај, сличан ономе који се генерише са
  \tex{completecontent}, само без наслова. Али ако се команда постави
  унутар Поглавља 1, а испред одељка 1.1, садржај ће приказивати само из
  чега се састоји поглавље; а ако се постави на почетак одељка 1.2,
  садржај ће приказивати само оно што се налази у том одељку. Али ако се
  команда постави, на пример, између одељака 1.1 и 1.2, игнорисаће се.
  Такође ће се игнорисати и ако се постави на крај одељка, или на крај
  документа.

\stopSmallPrint

Све ово се, наравно, односи само на случај када се команди не поставе
никакве опције. Тачније, опција {\tt criterium} ће променити то
подразумевано понашање.

Од свих опција које подржава команда \tex{placecontent} објаснићу само
њих две, најважније за постављање садржаја и још важније, само оне које
су (делимично) документоване у \ConTeXt\ референтном упутству. Опција
{\tt criterium} која утиче на оно што се поставља у садржај у зависности
од места у изворном фајлу у којем се налази команда; и опција {\tt
alternative}, која утиче на општи распоред генерисаног садржаја.

\stopsubsection

\startsubsection
  [
    reference=sec:criteriumlist,
    title={Елементи који се постављају у садржај: опција {\tt criterium}},
    bookmark={Елементи који се постављају у садржај: опција criterium}
  ]

Подразумевано понашање команде \tex{placecontent} у вези са местом
команде у изворном фајлу је објашњено изнад. Опција {\tt criterium} мења
ово понашање. Уз остале, она може да има и следеће вредности:

\startitemize

  \item {\tt all}: садржај ће бити комплетан, без обзира на место у
  изворном фајлу на којем се нађе команда.

  \item {\tt previous}: садржај ће обухватити само команде поделе (нивоа
  на ком се налазимо) {\em испред} команде \tex{placecontent}. Ова
  опција је предвиђена за садржаје који се исписују на крају документа
  или одређеног одељка.

  \item {\tt part, chapter, section, subsection…\,}: говоре да би
  садржај требало да се ограничи само на наведени ниво поделе.

  \item {\tt component}: у пројектима из више фајлова (погледајте
  \in{одељак}[sec-projects]), генерисаће се само садржај који одговара
  {\em компоненти} у којој је пронађена команда \tex{placecontent} или
  \tex{completecontent}.

\stopitemize

\stopsubsection

\startsubsection
  [
    reference=sec:alternativelist,
    title={Распоред садржаја: опција {\tt alternative}},
    bookmark={Распоред садржаја: опција alternative},
  ]

Опција {\tt alternative} контролише општи распоред садржаја. Њене главне
вредности можете видети у \in{табели}[tbl:contentalternatives].

\placetable
  [here]
  [tbl:contentalternatives]
  {\tfx Начини форматирања садржаја}
{\switchtobodyfont[small]
\starttabulate[|c|l|l|]
\HL
\NC {\bf alternative}
\NC {\bf Из чега се састоји садржај}
\NC {\bf Напомене}
\NR
\HL
\NC a
\NC Број – Наслов – Страница
\NC Једна ставка по линији
\NR
\NC b
\NC Број – Наслов – Размаци – Страница
\NC Једна ставка по линији
\NR
\NC c
\NC Број – Наслов – Водеће тачке – Страница
\NC Једна ставка по линији
\NR
\NC d
\NC Број – Наслов – Страница
\NC Континуални садржај
\NR
\NC e
\NC Наслов
\NC Уоквирен
\NR
\NC f
\NC Наслов
\NC Лево поравнат,
\NR
\NC\NC\NC десно поравнат или центриран
\NR
\NC g
\NC Наслов
\NC Центриран
\NR
\HL
\stoptabulate}

Прве четири вредности за alternative обезбеђују све информације о сваком
одељку (његов број, његов наслов и страницу на којој почиње), па су зато
погодне и за папирне и електронске документе.  Последње три алтернативе
нас информишу само о наслову, тако да су погодни само за електронске
документе у којима није неопходно да се зна број странице на којој
почиње одељак, ако садржај има хиперлинк на њу, а они се у систему
\ConTeXt\ подразумевано постављају.

Иначе, ако читалац жели да на најбољи начин схвати разлике између
различитих алтернатива, сматрам да треба да генерише тест документ у
којем може детаљно да их анализира.

\stopsubsection

\startsubsection
  [
    reference=sec:setuplist,
    title=Формат ставки садржаја,
  ]
  \PlaceMacro{setuplist}

Већ смо видели да нам {\tt alternative} опција команде
\tex{placecontent} или \tex{completecontent} омогућава да контролишемо
општи {\em распоред} садржаја, тј.  које информације ће се приказати за
сваки наслов, и хоће ли или неће бити прелома реда којим се раздвајају
различити наслови. Завршна подешавања сваке ставке садржаја се врше
командом \tex{setuplist} чија је синтакса:

\type{\setuplist[Елемент][Конфигурација]}

где се {\em Елемент} односи на одређену врсту одељка. То може да буде
{\tt part}, {\tt chapter}, {\tt section}, итд. Такође можемо истовремено
да конфигуришемо више од једног елемента, тако што их раздвојимо
запетама.  {\em Конфигурација} има до 54 могућности, од којих многе, као
и обично, нису експлицитно документоване; али то не спречава да оне које
су документоване, или оне које нису довољно јасне омогуће потпуно
подешавање садржаја.

Сада ћу да објасним најважније опције, тако што ћу их груписати према
њиховој корисности, али пре него што се упустимо у њих, присетимо се да
ставка садржаја, у зависности од вредности опције {\tt alternative},
може имати до три различите компоненте: број одељка, наслов одељка и
број странице. Конфигурационе опције нам омогућавају да конфигуришемо
различите компоненте глобално, или појединачно:

\startitemize

  \item {\em Укључивање (или не) различитих компоненти}: ако смо
  изабрали алтернативу која уз наслов укључује и број одељка и страницу
  (алтернативе \quote{a} \quote{b} \quote{c} или \quote{d}), опције {\tt
  headnumber=no} или {\tt pagenumber=no} значе да се за одређени ниво
  који конфигуришемо, број одељка ({\tt headnumber}) или број странице
  ({\tt pagenumber}) не приказује.

  \item {\em Боја и стил}: већ знамо да ставка која генерише одређени
  одељак у садржају може имати (у зависности од алтернативе) до три
  различите компоненте: број одељка, наслов и број странице. Опцијама
  {\tt style} и {\tt color} можемо свима одједном да одредимо стил и
  боју, или да опцијама {\tt numberstyle, textstyle} или {\tt pagestyle}
  (за стил) и {\tt numbercolor, textcolor} или {\tt pagecolor} (за боју)
  то посебно урадимо појединачно за сваку.

  Да би се контролисао изглед сваке ставке, уз сам стил можемо да на
  комплетну ставку или на неку од њених различитих делова применимо неке
  команде. За то служе опције {\tt command}, {\tt numbercommand}, {\tt
  pagecommand} и {\tt textcommand}. Команда која се овде наводи може да
  буде стандардна \ConTeXt\ команда, или команда коју сами направимо.
  Број одељка, текст наслова и број странице се прослеђују као аргументи
  опцији {\tt command}, док се опцији {\tt textcommand} прослеђује
  наслов одељка, а опцији {\tt pagecommand} број странице. Тако ће, на
  пример, следећа реченица обезбедити да се наслови одељака исписују
  (лажним) капиталом:

  \starttyping

    \setuplist[section][textcommand=\Cap]

  \stoptyping

  \item {\em Раздвајање од осталих елемената садржаја}: опције {\tt
  before} и {\tt after} нам омогућавају да наведемо команде које ће се
  извршити пре ({\tt before}) и након ({\tt after}) слагања ставке
  садржаја. Обично се ове команде користе било за постављање размака или
  неког раздвајајућег елемента између претходне и наредне ставке.

  \item {\em Увлачење елемента}: поставља се опцијом {\tt margin} која
  нам омогућава да поставимо величину увлачења које ће имати ставке
  нивоа који конфигуришемо.

  \item {\em Уграђени хиперлинкови у садржај}: ставке садржаја
  подразумевано поседују хиперлинк на страницу документа на којој почиње
  одељак о којем је реч. Употребом опције {\tt interaction} можемо
  искључити ову функцију ({\tt interaction=no}), или можемо да је
  огрнаичимо на део ставке у којој ће се налазити хиперлинк, што може
  бити број одељка ({\tt interaction=number} или {\tt
  interaction=sectionnumber}), наслов одељка ({\tt interaction=text} или
  {\tt interaction=title}) или број странице ({\tt interaction=page} или
  {\tt interaction=pagenumber}).

  \item {\em Остали аспекти}:

  \startitemize

    \item {\tt width}: наводи величину размака између броја и наслова
    одељка. Може да буде димензија, или кључна реч {\tt fit} која
    поставља тачну ширину броја одељка.

    \item {\tt symbol}: омогућава да се број одељка замени {\em
    симболом}. Подржане су три могуће вредности: {\tt one}, {\tt two} и
    {\tt three}. Вредност {\tt none} за ову опцију уклања из садржаја
    број одељка.

    \item {\tt numberalign}: наводи поравнања елемената нумерације; може
    да буде left, right, middle, flushright, flushleft.

  \stopitemize

\stopitemize

Међу многим опцијама за конфигурисање садржаја, не постоји ниједна која
нам омогућава директну контролу размака између линија. Он ће
подразумевано да буде исти као онај који се примењује на комплетан
документ. Међутим, често је пожељно да су линије садржаја мало {\em
збијеније} од остатка документа. Да бисмо то постигли, требало би да
команду која генерише садржај (\tex{placecontent} или
\tex{completecontent}) поставимо унутар групе у којој се подешава
различити размак између линија. На пример:

\starttyping
\start
  \setupinterlinespace[small]
  \placecontent
\stop
\stoptyping

\stopsubsection

\startsubsection
  [
    reference=sec:manual adjustments,
    title=Ручна подешавања садржаја,
  ]

Већ смо објаснили две основне команде за генерисање садржаја
(\tex{placecontent} и \tex{completecontent}), као и њихове опције.
Са ове две команде се садржаји аутоматски генеришу, и конструишу од
постојећих нумерисаних одељака у документу, или у блоку или сегменту
документа на који се садржај односи. Сада ћу објаснити одређена
{\em подешавања} која можемо поставити тако да садржај није толико
{\em аутоматизован}. Ово подразумева:

\startitemize

  \item Могућност да се у садржај укључе и наслови неких ненумерисаних
  одељака.

  \item Могућност ручног слања одређене ставке у садржај која не
  одговара присуству нумерисаног одељка.

  \item Могућност да се одређени нумерисани одељак искључи из садржаја.

  \item Могућност да се наслов за одређену ставку у садржају не подудара
  у потпуности са насловом који се налази у телу документа.

\stopitemize

\stopsubsection

\startsubsubsection
  [
    reference=sec:toc with unnumbered secs,
    title=Укључивање ненумерисаних одељака у садржај,
  ]

Механизам којим \ConTeXt\ изграђује садржај подразумева да се сви
нумерисани одељци аутоматски укључују, што, као што сам већ рекао
(погледајте \in{одељак}[sec:title parts]) зависи од две опције ({\tt
number} и {\tt incrementnumber}) које можемо да променимо командом
\tex{setuphead} за сваку врсту одељка.  Тамо је такође је објашњено да
ће тип одељка за који је {\tt incrementnumber=yes} и {\tt number=no}
бити интерно, а не видљиво нумерисани одељак.

Стога, ако желимо да одређени ненумерисани тип одељка – на пример, {\tt
title} – буде део садржаја, морамо да променимо вредност опције {\tt
incrementnumber} за тај тип одељка, тако што је поставимо на {\tt yes},
па да онда укључимо у садржај тај тип одељка, што се ради, као што је
објашњено изнад, командом \tex{setupcombinedlist}:

\starttyping
  \setuphead
    [title]
    [incrementnumber=yes]

 \setupcombinedlist
   [content]
   [list={chapter, title, section, subsection, subsubsection}]
\stoptyping

Затим, ако то желимо, командом \tex{setuplist} можемо ту ставку да
форматирамо на потпуно исти начин као и било коју другу; на пример:

\type{\setuplist[title][style=bold]}

{\bf Напомена:} управо објашњеном процедуром се у садржај из нашег
документа укључују све инстанце типа ненумерисаног одељка о којем је реч
(у овом примеру, одељци типа {\tt title}). Ако желимо да се у садржај
укључи само одређено појављивање тог типа одељка, пожељно је да се то
уради процедуром која је објашњена испод.

\stopsubsubsection

\startsubsubsection
  [
    reference=sec:manualtoc,
    title=Ручно уметање ставки у садржај,
  ]

Са било ког места у изворном фајлу у садржај можемо да пошаљемо или
ставку (симулирањем постојања одељка који у стварности не постоји), или
команду.

Да бисмо послали ставку која симулира постојање одељка који уствари не
постоје, користимо команду \PlaceMacro{writetolist}\tex{writetolist}
чија је синтакса:

\type{\writetolist[ТипОдељка][Опције]{Број}{Текст}}

где

\startitemize

  \item Први аргумент наводи ниво који ова ставка мора да има у
  садржају: {\tt chapter}, {\tt section}, {\tt subsection}, etc.

  \item Други аргумент, који није обавезан, омогућава да се ова ставка
  конфигурише на одређени начин. Ако се ручно послати унос изостави,
  форматираће се као и све остале ставке нивоа који је наведен првим
  аргументом; мада морам истаћи да у мојим тестовима ово није успело да
  проради.

  \startSmallPrint

    И у званичној листи \ConTeXt\ команди (погледајте
    \in{одељак}[sec:qrc-setup-en]) и у викију нам се каже да овај
    аргумент прихвата исте вредности као и \Doubt \tex{setuplist}, што
    је команда која нам омогућава да форматирамо различите ставке
    садржаја. Али, инсистирам, у мојим тестовима ни на који начин нисам
    успео да променим изглед ставке која је ручно послата у садржај.

  \stopSmallPrint

  \item Трећи аргумент би требало да пресликава нумерацију коју има
  елемент \Doubt послат у садржај, али ни то нисам успео да постигнем у
  својим тестовима.

  \item Последњи аргумент садржи текст који треба да се пошаље у
  садржај.

\stopitemize

Ово је корисно, на пример, ако желимо да пошаљемо одређени ненумерисани
одељак у садржај, али само њега. У \in{одељку}[sec:toc with unnumbered
secs] се објашњава како да се у садржај пошаље цела категорија
ненумерисаних одељака; али ако у садржај желимо да пошаљемо само једно
одређено појављивање неког типа одељка, много је згодније да се употреби
команда \tex{writetolist}. Па тако, на пример, ако желимо да одељак
нашег документа који садржи библиографију не буде нумерисани одељак, али
да ипак буде део садржаја, могли би да напишемо:

\starttyping
\subject{Bibliography}
\writetolist[section]{}{Bibliography}
\stoptyping

Приметите како за одељак користимо ненумерисану верзију команде {\tt
section}, што је {\tt subject}, али је у садржај шаљемо ручно, као да је
у питању нумерисани одељак ({\tt section}).

Још једна команда која је предвиђена за ручно утицање на садржај је
\PlaceMacro{writebetweenlist}\tex{writebetweenlist} и она се користи да
се са одређеног места у документу у садржај не пошаље сама ставка, већ
{\em команда}.  На пример, ако желимо да између две ставке садржаја
уметнемо линију, могли бисмо да напишемо следеће на било ком месту у
документу које се налази између два одељка у питању:

\type{\writebetweenlist[section]{\hrule}}

\stopsubsubsection

\startsubsubsection
  [title=Искључивање из садржаја одређеног одељка који припада врсти која чини део садржаја]

Садржај се конструише од {\em типова одељака} који су, као што већ
знамо, одређени опцијом {\tt list} команде \tex{setupcombinedlist}, па
ако одређени {\em тип одељка} мора да се појави у садржају, нема начина
да се неки одређени одељак тог типа из било ког разлога изузме из
садржаја.

Обично, ако не желимо да се тамо појави одељак, употребљавамо његов {\em
ненумерисани еквивалент} што значи, на пример, {\tt title} уместо {\tt
chapter}, {\tt subject} уместо {\tt section}, итд.  Ови одељци се не
шаљу у садржај, нити се нумеришу.

Међутим, ако из неког разлога желимо да се одређени одељак нумерише, али
да се не појави у садржају, чак и ако се остали одељци тог типа
појављују у садржају, можемо употребити {\em трик} који се састоји у
креирању новог типа одељка који је {\em клон} одељка у питању. На пример:

\starttyping
\definehead[MySubsection][subsection]
\section{Први одељак}
\subsection{Први пододељак}
\MySubsection{Други пододељак}
\subsection{Трећи пододељак}
\stoptyping

Ово ће обезбедити да када се уметне тип одељка {\tt MySubsection},
увећава се бројач пододељака, али се не мења садржај, јер он
подразумевано не укључује одељке типа {\tt MySubsection}.

\stopsubsubsection

\startsubsubsection
  [
     title=Наслов одељка у садржају који се разликује од наслова у телу документа,
  ]

Ако не желимо да наслов одређеног одељка који је део садржаја буде исти
као онај који се приказује у телу документа, можемо употребити једну од
две процедуре које су нам на располагању:

\startitemize

  \item Креирање одељка без употребе традиционалне синтаксе
  (\type{ТипОдељка{Наслов}}) већ помоћу \tex{ТипОдељка [Опције]}, или са
  \tex{startТипОдељка [Опције]}, и додељивање текста који желимо да се
  упише у садржај опцији {\tt list} (погледајте
  \in{одељак}[sec:sectionsyntax]).

  \item Када се одељак о коме је реч пише у телу документа, употреби се
  команда \tex{nolist}: она чини да се текст који је њен аргумент у
  садржају замењује елипсисом. На пример:

\starttyping
\chapter
  [title={\nolist{Приближан и донекле понављајући}
           увод у реалност очигледног}]
\stoptyping

  би сложило наслов поглавља у телу документа, \quotation{Приближан и
  донекле понављајући увод у реалност очигледног}, али би у садржај
  послало следећи текст \quotation{... увод у реалност очигледног}.

  \startSmallPrint

    {\bf Пажња:} ово што сам управо истакао у вези са командом
    \tex{nolist} се наводи и у \ConTeXt\ референтном упутству и у
    \goto{викију}[url(https://wiki.contextgarden.net/Command/nolist)].
    Међутим, код мене производи грешку при компајлирању која ме
    обавештава да команда \tex{nolist} није дефинисана.

  \stopSmallPrint

\stopitemize

\stopsubsubsection

\stopsubsection

\stopsection

\startsection
  [
    reference=sec:lists,
    title={Листе, комбиноване листе и садржаји базирани на листи},
    bookmark={Листе, комбиноване листе и садржаји базирани на листи},
  ]

Интерно за \ConTeXt, садржај није ништа више од {\em комбиноване листе},
која се, као што јој име наговештава, састоји од комбинације простих
листи. Стога је основна представа на основу које \ConTeXt\ изграђује
садржај, листа. Неколико листи се комбинује тако да формирају садржај.
\ConTeXt\ подразумевано садржи предефинисану комбиновану листу која се
назива \MyKey{content} и то је оно са чиме раде команде које смо до сада
истражили: \tex{placecontent} и \tex{completecontent}.

\startsubsection
  [title=Листе у систему \ConTeXt,
  bookmark=Листе у систему ConTeXt]

{\em Листа} је за \ConTeXt\ опсег нумерисаних елемената о којима треба
да се памте три ствари:

\startitemize[n]

  \item Број.

  \item Име или наслов.

  \item Страница на којој се налази.

\stopitemize

Ово се дешава са нумерисаним одељцима; али исто тако и са осталим
елементима документа као што су слике, табеле, итд. У општем случају,
оним елементима за које постоји команда чије име почиње са \tex{place} и
која их поставља у документ, као што су \tex{placetable},
\tex{placefigure}, итд.

У свим овим случајевима, \ConTeXt\ аутоматски генерише листу различитог
броја појављивања у документу елемента чији је тип у питању, његов број,
наслов и страницу.  Тако, на пример, постоји листа поглавља, под називом
{\tt chapter}, друга за одељке, под називом {\tt section}; али и једна
за табеле (која се назива {\tt table}) или слике (под називом {\tt
figure}). Листе које \ConTeXt\ аутоматски генерише се увек називају исто
као и ставка коју чувају.

Листа ће са такође аутоматски креирати ако, на пример, направимо нови
тип нумерисаног одељка: када је креирамо, имплицитно се креира и листа
која их чува. А ако за ненумерисани одељак поставимо опцију {\tt
incrementnumber=yes}, чиме га претварамо у нумерисани одељак, такође
ћемо имплицитно да креирамо и листу под тим именом.

Уз имплицитне листе (које \ConTeXt\ аутоматски дефинише) командом
\tex{definelist} можемо да креирамо и своје листе. Њена синтакса је

\PlaceMacro{definelist}\type{\definelist[ИмеЛисте][Конфигурација]}

Ставке листе се додају:

\startitemize

  \item У листе предефинисане у систему \ConTeXt, или у оне које се
  аутоматски креирају као резултат прављења новог плутајућег објекта
  (погледајте \in{одељак}[sec:definefloat]), сваки пут када се ставка из
  листе уметне у документ, било командом поделе, било команом
  \tex{placeШтагод} за остале типове листи. На пример: \tex{placefigure}
  ће да уметне било какву слику у документ, али ће такође да уметне и
  одговарајућу ставку на листу.

  \item У било коју врсту листе ручно командом
  \tex{writetolist[ИмеЛисте]}, која је већ објашњена
  \in{пододељку}[sec:manualtoc] \in{одељка}[sec:manual adjustments].
  Такође је доступна и команда \tex{writebetweenlist}.  И она је
  објашњена у том одељку.

\stopitemize

Када се листа креира и у њу поставе све њене ставке, постоје три основне
команде везане за листу \tex{setuplist},
\PlaceMacro{placelist}\tex{placelist} и
\PlaceMacro{completelist}\tex{completelist}. Прва нам омогућава да
конфигуришемо како изгледа листа; последње две умећу листу о којој се
ради на место у документу на којем се нађу команде. Разлика између
\tex{placelist} и \tex{completelist} је слична разлици између
\tex{placecontent} и \tex{completecontent} (погледајте одељке
\in{}[sec:completecontent] и \in{}[sec:placecontent]).

На пример,

\type{\placelist[section]}

ће да уметне листу одељака, постављајући и хиперлинкове на њих у случају
да је укључена интерактивност документа, тј. ако у \tex{setuplist} није
постављено set {\tt interaction=no}. Листа одељака није у потпуности
иста као садржај базиран на одељцима: појам садржаја обично укључује и
ниже нивое (пододељке, подпододељке, итд.).  Али листа одељака ће да
укључи само одељке и ништа више.

Синтакса ових команди је:

\type{\placelist[ИмеЛисте][Опције]}

\type{\setuplist[ИмеЛисте][Конфигурација]}

\tex{setuplist} опције су већ објашњене у \in{одељку}[sec:setuplist], а
опције за \tex{placelist} су исте као опције за \tex{placecontent}
(погледајте \in{одељак}[sec:placecontent]).

\stopsubsection

\startsubsection
  [
    reference=sec:variouslists,
    title={Листе или индекси слика, табела и осталих ставки},
  ]

Из онога што је до сада речено, може се видети да пошто \ConTeXt\
аутоматски креира листу слика које су постављене у документ командом
\tex{placefigure}, генерисање листе или индекса слика на одређеном месту
у документу је просто колико и употреба команде \tex{placelist[figure]}.
А ако желимо да генеришемо листу са насловом (слично ономе што добијамо
са \tex{completecontent}) потребно је да употребимо команду
\tex{completelist[figure]}. Слично можемо да урадимо и са остале четири
предефинисане врсте плутајућих објеката у систему \ConTeXt: табелама
(\MyKey{table}), графицима (\MyKey{graphic}), {\em интермецима}
(\MyKey{intermezzo}) и хемијским формулама (\MyKey{chemical}), мада за
одређене случајеве ових, \ConTeXt\ већ нуди команду која их генерише без
наслова: (\PlaceMacro{placelistoffigures}\tex{placelistoffigures},
\PlaceMacro{placelistoftables}\tex{placelistoftables},
\PlaceMacro{placelistofgraphics}\tex{placelistofgraphics},
\PlaceMacro{placelistofintermezzi}\tex{placelistofintermezzi} и
\PlaceMacro{placelistofchemicals}\tex{placelistofchemicals}), а још
једну која их генерише са насловом:
(\PlaceMacro{completelistoffigures}\tex{completelistoffigures},
\PlaceMacro{completelistoftables}\tex{completelistoftables},
\PlaceMacro{completelistofgraphics}\tex{completelistofgraphics},
\PlaceMacro{completelistofintermezzi}\tex{completelistofintermezzi} и
\PlaceMacro{completelistofchemicals}\tex{completelistofchemicals}), на
сличан начин као са \tex{completecontent}.

На исти начин, за плутајуће објекте које смо сами креирали (погледајте
\in{одељак}[sec:definefloat]) аутоматски ће се креирати
\tex{placelistof<ИмеПлутајућег>} и
\tex{completelistof<ИмеПлутајућегFloatName>}.

За листе које смо сами креирали командом \tex{definelist}, индекс можемо
да направимо помоћу \tex{placelist[ИмеЛисте]} или помоћу
\tex{completelist[ИмеЛисте]}.

\stopsubsection

\startsubsection
  [title=Комбиноване листе]

Комбинована листа је, као што јој име наговештава, листа која комбинује
ставке из различитих претходно дефинисаних листи. \ConTeXt\
подразумевано дефинише комбиновану листу за садржај чије име је
\MyKey{content}, али сами можемо да креирамо остале комбиноване листе
командом \PlaceMacro{definecombinedlist}\tex{definecombinedlist} чија је
синтакса:

\type{\definecombinedlist[Име][Листе][Опције]}

где је

\startitemize

  \item {\em Име}: име које се додељује новој комбинованој листи.

  \item {\em Листе}: односи се на имена листи које се комбинују,
  раздвојена запетама.

  \item {\em Опције}: конфигурационе опције листе. Могу да се наведу у
  време дефинисања листе, или, што је вероватно боље, када се позива
  листа.  Главне опције (које су већ раније објашњене) су {\tt
  criterium} (\in{пододељак}[sec:criteriumlist] \in{одељка}
  [sec:placecontent]) и {\tt alternative} (у
  \in{пододељку}[sec:alternativelist] истог одељка).

\stopitemize

Успутни ефекат креирања комбиноване листе командом
\tex{definecombinedlist} је да се такође креира и команда која се зове
\tex{placeИмеЛисте} и која служи да се листа позове, то јест: да се
уметне у излазни фајл. Тако ће, на пример, 

\type{definecombinedlist[TOC]}

да креира команду \tex{placeTOC}; а

\type{definecombinedlist[content]}

да креира команду \tex{placecontent}

Али само мало, \tex{placecontent}! Зар то није команда која се користи
за креирање {\em обичног} садржаја? Заиста: ово значи да \ConTeXt\
стандардни садржај уствари креира помоћу следеће команде:

\starttyping
\definecombinedlist
  [content]
  [part, chapter, section, subsection,
    subsubsection, subsubsubsection,
    subsubsubsubsection]
\stoptyping

Када се дефинишемо нашу комбиновану листу, можемо да је конфигуришемо
(или реконфигуришемо) командом \tex{setupcombinedlist} која прихвата већ
објашњене опције {\tt criterium} (погледајте
\in{пододељак}[sec:criteriumlist] у \in{одељку}[sec:placecontent]) и
{\tt alternative} (погледајте \in{пододељак}[sec:alternativelist] у
истом одељку), као и опцију {\tt list} за {\em измену} листи које чине
комбиновану листу.

\startSmallPrint

  Званична листа \ConTeXt\ команди (погледајте
  \in{одељак}[sec:qrc-setup-en]) међу опцијама које прихвата команда
  \color[darkmagenta]{\MyKey{\backslash set\-up\-combinedlist}} не
  помиње опцију {\tt list}, али она се користи у неколико примера
  употребе ове команде у викију (који је, штавише, не помиње ни на
  страници посвећеној овој команди).  Лично сам проверио да ова опција
  функционише.

\stopSmallPrint

\stopsubsection

\stopsection

\startsection
  [title=Индекс]

\startsubsection
  [title=Генерисање индекса]

Индекс појмова се састоји од битних појмова и обично се налази на крају
документа. Он наводи странице на којима се може пронаћи та тема.

Када се словослагање књига радило ручно, генерисање индекса појмова је
био сложен задатак, и веома заморан. Било каква промена у пагинацији би
могла да утиче на све ставке индекса. Из тог разлога, индекси и нису
били уобичајени. Данас, компјутерски механизми словослагања значе да
мада је задатак још увек заморан, више није толико сложен ако се има у
виду да компјутерском систему није проблем да листу података који се
тичу ставке индекса одржава ажурном.

За генерисање индекса појмова нам је потребно да:

\startitemize[n]

  \item Одредимо које речи, појмови или концепти треба да буду део
  индекса. Ово је задатак који може да изврши само аутор.

  \item Проверимо на којим местима у документу се појављује свака ставка
  будућег индекса.  Мада, да будемо прецизни, уместо да {\em проверимо}
  места у изворном фајлу на којима се дискутује о концепту или проблему,
  када радимо у систему \ConTeXt, потребно је да та места {\em означимо}
  уметањем команде која ће затим служити за аутоматско генерисање
  индекса. Ово је заморни део.

  \item Коначно, генеришемо формат и индекс постављајући га на жељено
  место у документу. Ово последње је прилично једноставно у систему
  \ConTeXt\ и захтева само једну команду: \tex{placeindex}.

\stopitemize

\subsubsection{Претходна дефиниција ставки индекса и обележавање места у
изворном фајлу која се односе на њих}

Најважнији посао је други корак. Тачно је да га компјутерски систем
олакшава, у смислу да можемо извршити глобалну претрагу текста и тако
пронађемо места у изворном фајлу на којима се говори о одређеној теми.
Али такође не би требало ни да се слепо поуздамо у такве претраге
текста: добар индекс појмова мора детектовати свако место на коме се
дискутује о одређеној теми, чак и ако притом не користи {\em стандардни}
појам када се о њој говори.

Да бисмо {\em обележили} конкретно место у изворном фајлу и тако га
придружили уз реч, појам, или идеју која ће се појавити у индексу,
користимо команду \PlaceMacro{index}\tex{index} чија је синтакса:

\type{\index[Абецедно]{Ставка индекса}}

{\em Абецедно} није обавезан аргумент и користи се за навођење
алтернативног текста саме ставке индекса како би могла да се сложи по
абецедном редоследу, а {\em Ставка индекса} је текст који ће да се
појави у индексу, придружен овој ознаци. Такође можемо да применимо
особине форматирања која желимо да употребимо, а ако се у тексту јављају
резервисани карактери, они морају да се напишу на уобичајени \ConTeXt\
начин.

\startSmallPrint

  Могућност за абецедно сортирање ставке индекса на различити начин од
  онога како се заиста пише је врло корисна. Узмимо, на пример, овај
  документ и да сам хтео да генеришем ставку индекса за сва помињања
  команде \tex{TeX}. Низ \type{\index{\backslash TeX}} ће, на пример,
  команду поставити не према слову \quote{t} из \quote{TeX}, већ међу
  симболе, јер појам који се шаље у индекс почиње обрнутом косом цртом.
  Ово се решава тако што се напише \type{\index[tex]{\backslash TeX}}.

\stopSmallPrint

{\em Ставке индекса} ће бити оне које желимо. Да би индекс тема био
заиста користан, морамо да радимо мало напорније и да се питамо које
концепте ће читалац највероватније да потражи; тако да на пример, може
бити боље да се ставка дефинише као \quotation{болест, Хоџкинова} него
да се дефинише као \quotation{Хоџкинова болест}, јер је општији појам
\quotation{болест}.

\startSmallPrint

  Према конвенцији, ставке у индексу тема се увек пишу курентом, осим
  ако су лична имена.

\stopSmallPrint

Ако индекс има неколико нивоа дубине (дозвољено је до три), одређена
ставка индекса се придружује неком нивоу употребом карактера \quote{+}.
То се ради овако:

\starttyping
\index{Ставка 1+Ставка 2}
\index{Ставка 1+Ставка 2+Ставка 3}
\stoptyping

У првом случају смо дефинисали други ниво под именом {\em Ставка 2} који
ће бити подставка {\em Ставке 1}. У другом случају смо дефинисали трећи
ниво под називом {\em Ставка 3} који ће бити подниво {\em Ставке 2},
а која је подставка {\em Ставке 1}. На пример

\vbox{
\starttyping
My \index{пас}пас, је \index{пас+хрт}хрт који се зове Ракета.
Он не воли \index{мачка+луталица}мачке луталице.
\stoptyping}\blank[nowhite]

Вреди запазити неке детаље у вези са овим што је претходно речено:

\startitemize

  \item Команда \tex{index} се обично поставља {\em испред} речи којој
  се придружује и обично се не раздваја од ње размаком.  Разлог за то је
  да се обезбеди да се команда нађе на истој страници на којој се нађе и
  реч за коју је везана:

  \startitemize

      \item Ако би постојао размак који их раздваја, постојала би
      могућност да \ConTeXt\ изабере баш тај размак за прелом линије,
      што би онда могло да заврши и као прелом странице, па би у том
      случају команда била на једној страници а реч за коју је везана на
      наредној страници.

    \item Ако би команда дошла {\em након} речи, било би могуће да се та
    реч разбије по слоговима и да се између два слога уметне прелом
    линије који би могао да буде и прелом странице. У том случају би
    команда показивала на наредну страницу на којој је прва реч она на
    коју показује.

  \stopitemize

  \item Погледајте како се појмови другог нивоа уводе у другом и трећем
  облику команде.

  \item Приметите како се у трећој употреби \tex{index} команде, мада је
  реч која се појављује у тексту \quotation{мачке}, термин који се шаље
  у индекс је \quotation{мачка}.

  \item Коначно: приметите како су три ставке за индекс тема написане у
  само две линије. Раније сам рекао да је обележавање прецизних места у
  изворном фајлу заморно. Сада ћу додати и да је обележавање превише
  места контрапродуктивно. Преопширан индекс уопште није бољи од
  концизног индекса у којем су све информације битне.  Због тога сам
  раније рекао да би одлука о томе које речи треба да генеришу индекс
  требало да буде резултат свесне ауторове одлуке.

\stopitemize

Ако желимо да наш индекс буде заиста користан, појмови који се користе
као синоними морају да се у индексу групишу под један главни појам. Али
пошто читалац може да претражује индекс на неку информацију по било ком
од других главних појмова, уобичајено је да индекс садржи ставке које
упућују на друге ставке. На пример, индекс тема неког правног приручника
би врло лако могао да буде нешто слично овоме

\startframedtext[frame=off]

  уговорно неважење\\
  \qquad погледајте {\em ништавност}.

\stopframedtext

Ово не постижемо командом \tex{index}, већ са
\PlaceMacro{seeindex}\tex{seeindex} чији је формат:

\type{\seeindex [Абецедно] {Ставка1} {Ставка2}}

где је {\em Ставка1} ставка индекса које ће указивати на неку другу; а
{\em Ставка2} је циљ указивања. У нашем претходном примеру, требало би
да напишемо:

\starttyping
\seeindex{уговорно неважење}{ништавност}
\stoptyping

И у \tex{seeindex} такође можемо да употребимо знак \quote{+} да
назначимо поднивое за било који од њена два аргумента у великим
заградама.

\subsubsection{Генерисање коначног индекса}

Када у изворном фајлу обележимо све ставке за наш индекс, он се заиста и
генерише командама \PlaceMacro{placeindex}\tex{placeindex} или
\PlaceMacro{completindex}\tex{completindex}. Ове две команде скенирају
изворни фајл и траже \tex{index} команде, па генеришу листу свих ставки
које би индекс требало да садржи, придружујући појам са бројем странице
која одговара месту на којем је пронађена команда \tex{index}. Оне затим
по абецедном редоследу уређују листу појмова који се појављују у индексу
и спајају случајеве у којима се појам појављује више од један пут, па
коначно, умећу коректно форматирани резултат у финални документ.

Разлика између \tex{placeindex} и \tex{completeindex} је слична разлици
између \tex{content} и \tex{completecontent} (погледајте
\in{одељак}[sec:completecontent]): \tex{placeindex} је ограничена на
генерисање и уметање индекса, док \tex{completeindex} најпре у финални
документ умеће ново поглавље под подразумеваним именом
\quotation{Индекс}, па у њему слаже индекс.

\stopsubsection

\startsubsection
  [title=Форматирање индекса тема]
  \PlaceMacro{setupregister}

Индекси тема су одређена примена општије структуре коју \ConTeXt\ назива
\quotation{\em регистар}; тако да се индекс форматира командом:

\type{\setupregister[index][Конфигурација]}

Овом командом можемо:

\startitemize

  \starthead Одредити како ће индекс и његови различити елементи да
  изгледају. Наиме:\stophead   %\head не ради само са LMTX

  \startitemize

    \item Наслови индекса који обично представљају слова абецеде. Они су
    подразумевано исписана курентом. Са {\tt alternative=A} можемо
    подесити да буду у верзалу.

    \item Саме ставке и њихов број странице. Изглед зависи од опција
    {\tt textstyle, textcolor, textcommand} и {\tt deeptextcommand} за
    текућу ставку, а {\tt pagestyle, pagecolor} и {\tt pagecommand}, за
    број странице. Са {\tt pagenumber=no} такође можемо да генеришемо и
    индекс тема без бројева страница (мада не знам да ли ово може бити
    корисно).

    \item Опција {\tt distance} мери ширину раздвајања између имена
    ставке и бројева страница; али такође мери и количину увлачења
    подставки.

  \stopitemize

  Мислим да су имена опција {\tt style}, {\tt textstyle}, {\tt
  pagestyle}, {\tt color}, {\tt textcolor}, и {\tt pagecolor} довољно
  јасна да нам наговесте шта ради свака од њих. Што се тиче {\tt
  command}, {\tt pagecommand}, {\tt textcommand} и {\tt
  deeptextcommand}, указујем на објашњење слично названих опција у
  \in{одељку}[sec:titlestyle], који се тиче конфигурације команди
  поделе.

  \item Поставити општи изглед индекса, што између осталог укључује
  команде које се извршавају пре ({\tt before}) или након ({\tt after})
  индекса, број колона који он треба да има ({\tt n}), да ли би колоне
  требало да буду једнаке ширине или не ({\tt balance}), поравнање
  ставки ({\tt align}), итд.

\stopitemize

\stopsubsection

\startsubsection
  [title=Креирање осталих индекса]
  \PlaceMacro{defineregister}\PlaceMacro{setupregister}

Објаснио сам индекс тема као да је само та врста индекса могућа у
документу; али истина је да документи могу да имају онолико индекса
колико је потребно. На пример, могао би да постоји индекс личних имена,
који скупља имена особа које се помињу у документу, са ознаком места на
којем се цитирају. И то је врста индекса. Правни текстови би такође
могли да имају специјални индекс за помињања грађанског законика; или у
документу као што је овај који читате, индекс макроа који су у њему
објашњени, итд.

За креирање додатних индекса у документу користимо команду
\tex{defineregister} чија је синтакса:

\type{\defineregister [ИмеИндекса] [Конфигурација]}

где је {\em ИмеИндекса} име који ће се доделити новом индексу, а {\em
Конфигурација} контролише начин на који он функционише. Такође је могуће
да се индекс касније конфигурише помоћу

\type{\setupregister [ИмеИндекса] [Конфигурација]}

Када се креира нови индекс под именом {\em ИмеИндекса} на располагању
ћемо имати команду \tex{ИмеИндекса} којом обележавамо ставке које ће тај
индекс да садржи, на сличан начин као што се ставке обележавају са
\tex{index}.  Команда \tex{seeИмеИндекса} нам такође омогућава да
креирамо ставке које указују на друге ставке.

На пример: могли бисмо да креирамо индекс \ConTeXt\ команди у овом
документу командом:

\type{\defineregister[macro]}

која би креирала команду \tex{macro}. Она ми омогућава да обележим све
референце на \ConTeXt\ команде као ставку индекса, па да затим командама
\tex{placemacro} или \tex{completemacro} генеришем индекс.

\startSmallPrint

  Креирање новог индекса укључује команду \tex{ИмеИндекса} којом се
  обележавају његове ставке, и команде \tex{placeИмеИндекса} и
  \tex{completeИмеИндекса} којима се индекс генерише. Али ове две
  последње команде су уствари скраћенице две општије команде које се
  примењују на дати индекс.  Тако је \tex{placeИмеИндекса} еквивалентна
  са \tex{placeregister[ИмеИндекса]}, а \tex{completeИмеИндекса} је
  еквивалентна са \tex{completeregister[ИмеИндекса]}.

\stopSmallPrint

\stopsubsection

\stopsection

\stopchapter

\stopcomponent

%%% Local Variables:
%%% mode: ConTeXt
%%% mode: auto-fill
%%% coding: utf-8-unix
%%% TeX-master: "../introCTX.mkiv"
%%% End:
%%% vim:set filetype=context tw=72 : %%%
